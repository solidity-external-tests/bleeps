{
  "address": "0x8c01CdF9058f828112Ea1201b5737B184f2E247E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Bleeps",
          "name": "bleeps",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "contract IERC721",
          "name": "mandalas",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "id",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "ownersAndPriceInfo",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x209206ea3da00d9a93ce6433ad101fc873611f987e35eeb163fcd685cf48d5d7",
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0x8c01CdF9058f828112Ea1201b5737B184f2E247E",
    "transactionIndex": 49,
    "gasUsed": "747231",
    "logsBloom": "0x
    "blockHash": "0x32a49c31aeead7d0b1d4755f7803e02bc3c3b50b20875602e4f7784d4ecc81ca",
    "transactionHash": "0x209206ea3da00d9a93ce6433ad101fc873611f987e35eeb163fcd685cf48d5d7",
    "logs": [],
    "blockNumber": 9549804,
    "cumulativeGasUsed": "28787236",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD09e3B3B4D4224a0995A59397eCEA2EAeb0a51D0",
    "2000000000000000000",
    172800,
    "100000000000000000",
    1635507323,
    "0xE53cd71271AcAdbeb0f64d9c8C62bBdDc8cA9e66",
    "0x4A219d8DE28C125edd354bBCc505cdc6eed771D7"
  ],
  "solcInputHash": "453ac7c543cabb868498baff475e6c82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Bleeps\",\"name\":\"bleeps\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"mandalas\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"ownersAndPriceInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/BleepsInitialSale.sol\":\"BleepsInitialSale\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x2f27682302bd27f76399273e73cedecd2de098aa101401a3b5f2196f520da6c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/Bleeps.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.9;\\n\\nimport \\\"./base/ERC721BaseWithPermit.sol\\\";\\nimport \\\"./interfaces/ITokenURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract Bleeps is IERC721, ERC721BaseWithPermit {\\n    event TokenURIContractSet(ITokenURI newTokenURIContract);\\n    event MaintainerSet(address newMaintainer);\\n    event MinterAdminSet(address newMinterAdmin);\\n    event MinterSet(address newMinter);\\n\\n    /// @notice maintainer can update the tokenURI contract, this is intended to be relinquished once the tokenURI has been heavily tested in the wild and that no modification are needed.\\n    address public maintainer;\\n\\n    /// @notice minterAdmin can update the minter. At the time being there is 576 Bleeps but there is space for extra instrument and the upper limit is 1024.\\n    /// could be given to the DAO later so instrument can be added, the sale of these instrument sound could benenfit the DAO too and add new members.\\n    address public minterAdmin;\\n\\n    /// @notice address allowed to mint, allow the sale contract to be separated from the token contract that can focus on the core logic\\n    /// Once all 1024 potential bleeps (there could be less, at minimum there are 576 bleeps) are minted, no minter can mint anymore\\n    address public minter;\\n\\n    /// @notice the contract that actually generate the sound (and all metadata via the a data: uri as tokenURI)\\n    ITokenURI public tokenURIContract;\\n\\n    constructor(\\n        address initialMaintainer,\\n        address initialMinterAdmin,\\n        ITokenURI initialTokenURIContract\\n    ) {\\n        maintainer = initialMaintainer;\\n        minterAdmin = initialMinterAdmin;\\n        tokenURIContract = initialTokenURIContract;\\n        emit TokenURIContractSet(initialTokenURIContract);\\n        emit MaintainerSet(initialMaintainer);\\n        emit MinterAdminSet(initialMinterAdmin);\\n    }\\n\\n    /// @notice A descriptive name for a collection of NFTs in this contract.\\n    function name() public pure override returns (string memory) {\\n        return \\\"Bleeps\\\";\\n    }\\n\\n    /// @notice An abbreviated name for NFTs in this contract.\\n    function symbol() external pure returns (string memory) {\\n        return \\\"BLEEP\\\";\\n    }\\n\\n    function contractURI() external view returns (string memory) {\\n        return tokenURIContract.contractURI();\\n    }\\n\\n    /// @notice Returns the Uniform Resource Identifier (URI) for token `id`.\\n    function tokenURI(uint256 id) external view returns (string memory) {\\n        return tokenURIContract.tokenURI(id);\\n    }\\n\\n    function setTokenURIContract(ITokenURI newTokenURIContract) external {\\n        require(msg.sender == maintainer, \\\"NOT_AUTHORIZED\\\");\\n        tokenURIContract = newTokenURIContract;\\n        emit TokenURIContractSet(newTokenURIContract);\\n    }\\n\\n    function setMaintainer(address newMaintainer) external {\\n        require(msg.sender == maintainer, \\\"NOT_AUTHORIZED\\\");\\n        maintainer = newMaintainer;\\n        emit MaintainerSet(newMaintainer);\\n    }\\n\\n    // TODO remove (used by ERC721Checkpointable for disabling it)\\n    // function disableTheUseOfCheckpoints() external {\\n    //     require(msg.sender == maintainer, \\\"NOT_AUTHORIZED\\\");\\n    //     _useCheckpoints = false;\\n    //     // TODO event\\n    //     // TODO special role ?\\n    // }\\n\\n    function setMinter(address newMinter) external {\\n        require(msg.sender == minterAdmin, \\\"NOT_AUTHORIZED\\\");\\n        minter = newMinter;\\n        emit MinterSet(newMinter);\\n    }\\n\\n    function setMinterAdmin(address newMinterAdmin) external {\\n        require(msg.sender == minterAdmin, \\\"NOT_AUTHORIZED\\\");\\n        minterAdmin = newMinterAdmin;\\n        emit MinterAdminSet(newMinterAdmin);\\n    }\\n\\n    function owners(uint256[] calldata ids) external view returns (address[] memory addresses) {\\n        addresses = new address[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            addresses[i] = address(uint160(_owners[id]));\\n        }\\n    }\\n\\n    function mint(uint16 id, address to) external payable {\\n        require(msg.sender == minter, \\\"ONLY_MINTER_ALLOWED\\\");\\n        require(id < 1024, \\\"INVALID_SOUND\\\");\\n\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(to != address(this), \\\"NOT_TO_THIS\\\");\\n        address owner = _ownerOf(id);\\n        require(owner == address(0), \\\"ALREADY_CREATED\\\");\\n        _safeTransferFrom(address(0), to, id, \\\"\\\");\\n    }\\n\\n    function sound(uint256 id) external pure returns (uint8 note, uint8 instrument) {\\n        note = uint8(id & 0x3F);\\n        instrument = uint8(uint256(id >> 6) & 0x0F);\\n    }\\n}\\n\",\"keccak256\":\"0xdd39397b940d9bbb9b24d2d37808aa9888b34ffa49f99708145ad1a2bcc980b4\",\"license\":\"AGPL-1.0\"},\"src/BleepsInitialSale.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.9;\\n\\nimport \\\"./Bleeps.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract BleepsInitialSale {\\n    Bleeps internal immutable _bleeps;\\n    uint256 internal immutable _startTime;\\n    uint256 internal immutable _initPrice;\\n    uint256 internal immutable _delay;\\n    uint256 internal immutable _lastPrice;\\n    address payable internal immutable _recipient;\\n    IERC721 internal immutable _mandalas;\\n\\n    constructor(\\n        Bleeps bleeps,\\n        uint256 initPrice,\\n        uint256 delay,\\n        uint256 lastPrice,\\n        uint256 startTime,\\n        address payable recipient,\\n        IERC721 mandalas\\n    ) {\\n        _bleeps = bleeps;\\n        _initPrice = initPrice;\\n        _delay = delay;\\n        _lastPrice = lastPrice;\\n        _startTime = startTime;\\n        _recipient = recipient;\\n        _mandalas = mandalas;\\n    }\\n\\n    function priceInfo()\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint256 initPrice,\\n            uint256 delay,\\n            uint256 lastPrice\\n        )\\n    {\\n        return (_startTime, _initPrice, _delay, _lastPrice);\\n    }\\n\\n    function ownersAndPriceInfo(uint256[] calldata ids)\\n        external\\n        view\\n        returns (\\n            address[] memory addresses,\\n            uint256 startTime,\\n            uint256 initPrice,\\n            uint256 delay,\\n            uint256 lastPrice\\n        )\\n    {\\n        addresses = _bleeps.owners(ids);\\n        startTime = _startTime;\\n        initPrice = _initPrice;\\n        delay = _delay;\\n        lastPrice = _lastPrice;\\n    }\\n\\n    function mint(uint16 id, address to) external payable {\\n        require(id < 576, \\\"INVALID_SOUND\\\");\\n        uint256 instr = (uint256(id) >> 6) % 16;\\n\\n        if (instr == 6 || instr == 8) {\\n            require(msg.sender == _recipient, \\\"These bleeps are reserved\\\");\\n        } else {\\n            uint256 expectedValue = _initPrice;\\n            uint256 timePassed = (block.timestamp - _startTime);\\n            uint256 priceDiff = _initPrice - _lastPrice;\\n            if (timePassed >= _delay) {\\n                expectedValue = _lastPrice;\\n            } else {\\n                expectedValue = _lastPrice + (priceDiff * (_delay - timePassed)) / _delay;\\n            }\\n\\n            (bool success, bytes memory returnData) = address(_mandalas).staticcall(\\n                abi.encodeWithSignature(\\\"balanceOf(address)\\\", msg.sender)\\n            );\\n            uint256 numMandalas = success && returnData.length > 0 ? abi.decode(returnData, (uint256)) : 0;\\n            if (numMandalas > 0) {\\n                expectedValue = (expectedValue * 8) / 10;\\n            }\\n            require(msg.value >= expectedValue, \\\"NOT_ENOUGH\\\");\\n            payable(msg.sender).transfer(msg.value - expectedValue);\\n            _recipient.transfer(expectedValue);\\n        }\\n        _bleeps.mint(id, to);\\n    }\\n}\\n\",\"keccak256\":\"0x40820eaa292f803242e2fa63e78ee08b262925c7502e9a7db7f0324cd8e6c34b\",\"license\":\"AGPL-1.0\"},\"src/base/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract ERC721Base is IERC165, IERC721 {\\n    using Address for address;\\n\\n    bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n\\n    uint256 internal constant OPERATOR_FLAG = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant NOT_OPERATOR_FLAG = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    mapping(uint256 => uint256) internal _owners;\\n    mapping(address => uint256) internal _balances;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    mapping(uint256 => address) internal _operators;\\n\\n    function name() public pure virtual returns (string memory) {\\n        revert(\\\"NOT_IMPLEMENTED\\\");\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the senders behalf.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approve(address operator, uint256 id) external override {\\n        (address owner, uint256 blockNumber) = _ownerAndBlockNumberOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(msg.sender == owner || _operatorsForAll[owner][msg.sender], \\\"UNAUTHORIZED_APPROVAL\\\");\\n        _approveFor(owner, blockNumber, operator, id);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == from, \\\"NOT_OWNER\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(to != address(this), \\\"NOT_TO_THIS\\\");\\n        if (msg.sender != from) {\\n            require(\\n                _operatorsForAll[from][msg.sender] || (operatorEnabled && _operators[id] == msg.sender),\\n                \\\"UNAUTHORIZED_TRANSFER\\\"\\n            );\\n        }\\n        _transferFrom(from, to, id);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n    /// @param from The send of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @notice Get the number of tokens owned by an address.\\n    /// @param owner The address to look for.\\n    /// @return balance The number of tokens owned by the address.\\n    function balanceOf(address owner) public view override returns (uint256 balance) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS_OWNER\\\");\\n        balance = _balances[owner];\\n    }\\n\\n    /// @notice Get the owner of a token.\\n    /// @param id The id of the token.\\n    /// @return owner The address of the token owner.\\n    function ownerOf(uint256 id) external view override returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n    }\\n\\n    /// @notice Get the owner of a token.\\n    /// @param id The id of the token.\\n    /// @return owner The address of the token owner.\\n    /// @return blockNumber The blocknumber at which the last transfer happened\\n    function ownerAndLastTransferBlockNumberOf(uint256 id) internal view returns (address owner, uint256 blockNumber) {\\n        return _ownerAndBlockNumberOf(id);\\n    }\\n\\n    struct OwnerData {\\n        address owner;\\n        uint256 lastTransferBlockNumber;\\n    }\\n\\n    function ownerAndLastTransferBlockNumberList(uint256[] calldata ids)\\n        external\\n        view\\n        returns (OwnerData[] memory ownersData)\\n    {\\n        ownersData = new OwnerData[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 data = _owners[ids[i]];\\n            ownersData[i].owner = address(uint160(data));\\n            ownersData[i].lastTransferBlockNumber = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n        }\\n    }\\n\\n    /// @notice Get the approved operator for a specific token.\\n    /// @param id The id of the token.\\n    /// @return The address of the operator.\\n    function getApproved(uint256 id) external view override returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Check if the sender approved the operator.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool isOperator) {\\n        return _operatorsForAll[owner][operator];\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    /// @param data Additional data.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public override {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == from, \\\"NOT_OWNER\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(to != address(this), \\\"NOT_TO_THIS\\\");\\n        if (msg.sender != from) {\\n            require(\\n                (operatorEnabled && _operators[id] == msg.sender) || _operatorsForAll[from][msg.sender],\\n                \\\"UNAUTHORIZED_TRANSFER\\\"\\n            );\\n        }\\n        _safeTransferFrom(from, to, id, data);\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// 0x01ffc9a7 is ERC165.\\n    /// 0x80ac58cd is ERC721\\n    /// 0x5b5e139f is for ERC721 metadata\\n    /// @param id The id of the interface.\\n    /// @return Whether the interface is supported.\\n    function supportsInterface(bytes4 id) public pure virtual override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal {\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(_checkOnERC721Received(msg.sender, from, to, id, data), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal virtual {}\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal {\\n        _beforeTokenTransfer(from, to, id);\\n        unchecked {\\n            _balances[to]++;\\n            if (from != address(0)) {\\n                _balances[from]--;\\n            }\\n        }\\n        _owners[id] = (block.number << 160) | uint256(uint160(to));\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /// @dev See approve.\\n    function _approveFor(\\n        address owner,\\n        uint256 blockNumber,\\n        address operator,\\n        uint256 id\\n    ) internal {\\n        if (operator == address(0)) {\\n            _owners[id] = (blockNumber << 160) | uint256(uint160(owner));\\n        } else {\\n            _owners[id] = OPERATOR_FLAG | (blockNumber << 160) | uint256(uint160(owner));\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /// @dev See setApprovalForAll.\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param id The id of the token we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x150b7a02 is returned.\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721Receiver(to).onERC721Received(operator, from, id, _data);\\n        return (retval == ERC721_RECEIVED);\\n    }\\n\\n    /// @dev See ownerOf\\n    function _ownerOf(uint256 id) internal view returns (address owner) {\\n        return address(uint160(_owners[id]));\\n    }\\n\\n    /// @dev Get the owner and operatorEnabled status of a token.\\n    /// @param id The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\\n        uint256 data = _owners[id];\\n        owner = address(uint160(data));\\n        operatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n    }\\n\\n    // @dev Get the owner and operatorEnabled status of a token.\\n    /// @param id The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return blockNumber the blockNumber at which the owner became the owner (last transfer)\\n    function _ownerAndBlockNumberOf(uint256 id) internal view returns (address owner, uint256 blockNumber) {\\n        uint256 data = _owners[id];\\n        owner = address(uint160(data));\\n        blockNumber = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n    }\\n}\\n\",\"keccak256\":\"0xb148a15d3f0def211211fdc1efcfd9a350ba3dbfeb087e565e0723c25f985084\",\"license\":\"AGPL-1.0\"},\"src/base/ERC721BaseWithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.9;\\n\\nimport \\\"./ERC721Base.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ninterface IERC1271 {\\n    function isValidSignature(bytes calldata data, bytes calldata signature) external view returns (bytes4 magicValue);\\n}\\n\\ninterface IERC1654 {\\n    function isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4 magicValue);\\n}\\n\\nabstract contract ERC721BaseWithPermit is ERC721Base {\\n    using Address for address;\\n    using ECDSA for bytes32;\\n\\n    enum SignatureType {\\n        DIRECT,\\n        EIP1654,\\n        EIP1271\\n    }\\n    bytes4 internal constant ERC1271_MAGICVALUE = 0x20c13b0b;\\n    bytes4 internal constant ERC1654_MAGICVALUE = 0x1626ba7e;\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_FOR_ALL_TYPEHASH =\\n        keccak256(\\\"PermitForAll(address spender,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    uint256 private immutable _deploymentChainId;\\n    bytes32 private immutable _deploymentDomainSeparator;\\n\\n    mapping(address => mapping(uint128 => uint128)) internal _nonces;\\n\\n    constructor() {\\n        uint256 chainId;\\n        //solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _deploymentChainId = chainId;\\n        _deploymentDomainSeparator = _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @dev Return the DOMAIN_SEPARATOR.\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _DOMAIN_SEPARATOR();\\n    }\\n\\n    function nonces(address owner, uint128 batch) external view returns (uint256 nonce) {\\n        nonce = uint256(batch << 128) + _nonces[owner][batch];\\n    }\\n\\n    function permit(\\n        address signer,\\n        address spender,\\n        uint256 id,\\n        uint256 deadline,\\n        uint256 nonce,\\n        bytes calldata signature,\\n        SignatureType signatureType\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        (address owner, uint256 blockNumber) = _ownerAndBlockNumberOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(signer == owner || _operatorsForAll[owner][signer], \\\"UNAUTHORIZED_SIGNER\\\");\\n\\n        _requireValidPermit(signer, spender, id, deadline, nonce, signature, signatureType);\\n\\n        uint128 batchId = uint128(nonce >> 128);\\n        uint128 batchNonce = uint128(nonce % 2**128);\\n        uint128 currentNonce = _nonces[signer][batchId];\\n        require(batchNonce == currentNonce, \\\"INVALID_NONCE\\\");\\n        _nonces[signer][batchId] = currentNonce + 1;\\n\\n        _approveFor(owner, blockNumber, spender, id);\\n    }\\n\\n    function permitForAll(\\n        address signer,\\n        address spender,\\n        uint256 deadline,\\n        uint256 nonce,\\n        bytes calldata signature,\\n        SignatureType signatureType\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        _requireValidPermitForAll(signer, spender, deadline, nonce, signature, signatureType);\\n\\n        uint128 batchId = uint128(nonce >> 128);\\n        uint128 batchNonce = uint128(nonce % 2**128);\\n        uint128 currentNonce = _nonces[signer][batchId];\\n        require(batchNonce == currentNonce, \\\"INVALID_NONCE\\\");\\n        _nonces[signer][batchId] = currentNonce + 1;\\n\\n        _setApprovalForAll(signer, spender, true);\\n    }\\n\\n    // -------------------------------------------------------- INTERNAL --------------------------------------------------------------------\\n\\n    function _requireValidPermit(\\n        address signer,\\n        address spender,\\n        uint256 id,\\n        uint256 deadline,\\n        uint256 nonce,\\n        bytes calldata signature,\\n        SignatureType signatureType\\n    ) internal view {\\n        bytes memory dataToHash = abi.encodePacked(\\n            \\\"\\\\x19\\\\x01\\\",\\n            _DOMAIN_SEPARATOR(),\\n            keccak256(abi.encode(PERMIT_TYPEHASH, spender, id, nonce, deadline))\\n        );\\n        return _requireValidSignature(signer, dataToHash, signature, signatureType);\\n    }\\n\\n    function _requireValidPermitForAll(\\n        address signer,\\n        address spender,\\n        uint256 deadline,\\n        uint256 nonce,\\n        bytes calldata signature,\\n        SignatureType signatureType\\n    ) internal view {\\n        bytes memory dataToHash = abi.encodePacked(\\n            \\\"\\\\x19\\\\x01\\\",\\n            _DOMAIN_SEPARATOR(),\\n            keccak256(abi.encode(PERMIT_FOR_ALL_TYPEHASH, spender, nonce, deadline))\\n        );\\n        return _requireValidSignature(signer, dataToHash, signature, signatureType);\\n    }\\n\\n    function _requireValidSignature(\\n        address signer,\\n        bytes memory dataToHash,\\n        bytes calldata signature,\\n        SignatureType signatureType\\n    ) internal view {\\n        if (signatureType == SignatureType.EIP1271) {\\n            require(\\n                IERC1271(signer).isValidSignature(dataToHash, signature) == ERC1271_MAGICVALUE,\\n                \\\"SIGNATURE_1271_INVALID\\\"\\n            );\\n        } else if (signatureType == SignatureType.EIP1654) {\\n            require(\\n                IERC1654(signer).isValidSignature(keccak256(dataToHash), signature) == ERC1654_MAGICVALUE,\\n                \\\"SIGNATURE_1654_INVALID\\\"\\n            );\\n        } else {\\n            address actualSigner = keccak256(dataToHash).recover(signature);\\n            require(signer == actualSigner, \\\"SIGNATURE_WRONG_SIGNER\\\");\\n        }\\n    }\\n\\n    /// @dev Return the DOMAIN_SEPARATOR.\\n    function _DOMAIN_SEPARATOR() internal view returns (bytes32) {\\n        uint256 chainId;\\n        //solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        // in case a fork happen, to support the chain that had to change its chainId,, we compute the domain operator\\n        return chainId == _deploymentChainId ? _deploymentDomainSeparator : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @dev Calculate the DOMAIN_SEPARATOR.\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), chainId, address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0xccb489313adf2fb0f036ff941351fb6d6f035eb5f52648fc4ef4e8dedfa9d5dd\",\"license\":\"AGPL-1.0\"},\"src/interfaces/ITokenURI.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.9;\\n\\ninterface ITokenURI {\\n    function tokenURI(uint256 id) external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xf1a620f3a52b969799cff0ac3afd12eb1917a9d88be9c9d26fe523e92899785e\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x61016060405234801561001157600080fd5b50604051610e42380380610e428339810160408190526100309161007c565b6001600160a01b0396871660805260c09590955260e0939093526101009190915260a05282166101205216610140526100f1565b6001600160a01b038116811461007957600080fd5b50565b600080600080600080600060e0888a03121561009757600080fd5b87516100a281610064565b809750506020880151955060408801519450606088015193506080880151925060a08801516100d081610064565b60c08901519092506100e181610064565b8091505092959891949750929550565b60805160a05160c05160e051610100516101205161014051610c996101a96000396000610560015260008181610357015261075601526000818160f70152818161027901528181610439015281816104a9015261051401526000818160cf015281816102560152818161048201526104d101526000818160a901528181610233015281816103e5015261045a015260008181608601528181610210015261040b01526000818161014201526107f60152610c996000f3fe6080604052600436106100345760003560e01c80632a2c67ff1461003957806381059f78146100735780639c20551314610123575b600080fd5b34801561004557600080fd5b50610059610054366004610857565b610138565b60405161006a9594939291906108cc565b60405180910390f35b34801561007f57600080fd5b50604080517f000000000000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f0000000000000000000000000000000000000000000000000000000000000000606082015260800161006a565b610136610131366004610966565b6102a0565b005b60606000806000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a0554c2688886040518363ffffffff1660e01b815260040161019b9291906109a6565b60006040518083038186803b1580156101b357600080fd5b505afa1580156101c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261020d9190810190610a3a565b977f000000000000000000000000000000000000000000000000000000000000000097507f000000000000000000000000000000000000000000000000000000000000000096507f000000000000000000000000000000000000000000000000000000000000000095507f0000000000000000000000000000000000000000000000000000000000000000945092505050565b6102408261ffff1610610314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f534f554e440000000000000000000000000000000000000060448201526064015b60405180910390fd5b600061032960106103ff600686901c16610b4c565b9050806006148061033a5750806008145b156103e3573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146103de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f546865736520626c656570732061726520726573657276656400000000000000604482015260640161030b565b6107a7565b7f000000000000000000000000000000000000000000000000000000000000000060006104307f000000000000000000000000000000000000000000000000000000000000000042610b8f565b9050600061047e7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610b8f565b90507f000000000000000000000000000000000000000000000000000000000000000082106104cf577f0000000000000000000000000000000000000000000000000000000000000000925061053b565b7f00000000000000000000000000000000000000000000000000000000000000006104fa8382610b8f565b6105049083610ba6565b61050e9190610be3565b610538907f0000000000000000000000000000000000000000000000000000000000000000610bf7565b92505b604051336024820152600090819073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a0823100000000000000000000000000000000000000000000000000000000179052516106059190610c0f565b600060405180830381855afa9150503d8060008114610640576040519150601f19603f3d011682016040523d82523d6000602084013e610645565b606091505b5091509150600082801561065a575060008251115b610665576000610679565b818060200190518101906106799190610c4a565b9050801561069b57600a61068e876008610ba6565b6106989190610be3565b95505b85341015610705576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f454e4f55474800000000000000000000000000000000000000000000604482015260640161030b565b336108fc6107138834610b8f565b6040518115909202916000818181858888f1935050505015801561073b573d6000803e3d6000fd5b5060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169087156108fc029088906000818181858888f1935050505015801561079f573d6000803e3d6000fd5b505050505050505b6040517f9c20551300000000000000000000000000000000000000000000000000000000815261ffff8416600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301527f00000000000000000000000000000000000000000000000000000000000000001690639c20551390604401600060405180830381600087803b15801561083a57600080fd5b505af115801561084e573d6000803e3d6000fd5b50505050505050565b6000806020838503121561086a57600080fd5b823567ffffffffffffffff8082111561088257600080fd5b818501915085601f83011261089657600080fd5b8135818111156108a557600080fd5b8660208260051b85010111156108ba57600080fd5b60209290920196919550909350505050565b60a0808252865190820181905260009060209060c0840190828a01845b8281101561091b57815173ffffffffffffffffffffffffffffffffffffffff16845292840192908401906001016108e9565b505050908301969096525060408101939093526060830191909152608090910152919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461096357600080fd5b50565b6000806040838503121561097957600080fd5b823561ffff8116811461098b57600080fd5b9150602083013561099b81610941565b809150509250929050565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156109df57600080fd5b8260051b80856040850137600092016040019182525092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8051610a3581610941565b919050565b60006020808385031215610a4d57600080fd5b825167ffffffffffffffff80821115610a6557600080fd5b818501915085601f830112610a7957600080fd5b815181811115610a8b57610a8b6109fb565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610ace57610ace6109fb565b604052918252848201925083810185019188831115610aec57600080fd5b938501935b82851015610b1157610b0285610a2a565b84529385019392850192610af1565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610b5b57610b5b610b1d565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610ba157610ba1610b60565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bde57610bde610b60565b500290565b600082610bf257610bf2610b1d565b500490565b60008219821115610c0a57610c0a610b60565b500190565b6000825160005b81811015610c305760208186018101518583015201610c16565b81811115610c3f576000828501525b509190910192915050565b600060208284031215610c5c57600080fd5b505191905056fea26469706673582212200fbfd25fde1421c53cb7e122270bf2224cbbbd46dd743565474e1b84253c576e64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c80632a2c67ff1461003957806381059f78146100735780639c20551314610123575b600080fd5b34801561004557600080fd5b50610059610054366004610857565b610138565b60405161006a9594939291906108cc565b60405180910390f35b34801561007f57600080fd5b50604080517f000000000000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f0000000000000000000000000000000000000000000000000000000000000000606082015260800161006a565b610136610131366004610966565b6102a0565b005b60606000806000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a0554c2688886040518363ffffffff1660e01b815260040161019b9291906109a6565b60006040518083038186803b1580156101b357600080fd5b505afa1580156101c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261020d9190810190610a3a565b977f000000000000000000000000000000000000000000000000000000000000000097507f000000000000000000000000000000000000000000000000000000000000000096507f000000000000000000000000000000000000000000000000000000000000000095507f0000000000000000000000000000000000000000000000000000000000000000945092505050565b6102408261ffff1610610314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f534f554e440000000000000000000000000000000000000060448201526064015b60405180910390fd5b600061032960106103ff600686901c16610b4c565b9050806006148061033a5750806008145b156103e3573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146103de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f546865736520626c656570732061726520726573657276656400000000000000604482015260640161030b565b6107a7565b7f000000000000000000000000000000000000000000000000000000000000000060006104307f000000000000000000000000000000000000000000000000000000000000000042610b8f565b9050600061047e7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610b8f565b90507f000000000000000000000000000000000000000000000000000000000000000082106104cf577f0000000000000000000000000000000000000000000000000000000000000000925061053b565b7f00000000000000000000000000000000000000000000000000000000000000006104fa8382610b8f565b6105049083610ba6565b61050e9190610be3565b610538907f0000000000000000000000000000000000000000000000000000000000000000610bf7565b92505b604051336024820152600090819073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a0823100000000000000000000000000000000000000000000000000000000179052516106059190610c0f565b600060405180830381855afa9150503d8060008114610640576040519150601f19603f3d011682016040523d82523d6000602084013e610645565b606091505b5091509150600082801561065a575060008251115b610665576000610679565b818060200190518101906106799190610c4a565b9050801561069b57600a61068e876008610ba6565b6106989190610be3565b95505b85341015610705576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e4f545f454e4f55474800000000000000000000000000000000000000000000604482015260640161030b565b336108fc6107138834610b8f565b6040518115909202916000818181858888f1935050505015801561073b573d6000803e3d6000fd5b5060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169087156108fc029088906000818181858888f1935050505015801561079f573d6000803e3d6000fd5b505050505050505b6040517f9c20551300000000000000000000000000000000000000000000000000000000815261ffff8416600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301527f00000000000000000000000000000000000000000000000000000000000000001690639c20551390604401600060405180830381600087803b15801561083a57600080fd5b505af115801561084e573d6000803e3d6000fd5b50505050505050565b6000806020838503121561086a57600080fd5b823567ffffffffffffffff8082111561088257600080fd5b818501915085601f83011261089657600080fd5b8135818111156108a557600080fd5b8660208260051b85010111156108ba57600080fd5b60209290920196919550909350505050565b60a0808252865190820181905260009060209060c0840190828a01845b8281101561091b57815173ffffffffffffffffffffffffffffffffffffffff16845292840192908401906001016108e9565b505050908301969096525060408101939093526060830191909152608090910152919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461096357600080fd5b50565b6000806040838503121561097957600080fd5b823561ffff8116811461098b57600080fd5b9150602083013561099b81610941565b809150509250929050565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156109df57600080fd5b8260051b80856040850137600092016040019182525092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8051610a3581610941565b919050565b60006020808385031215610a4d57600080fd5b825167ffffffffffffffff80821115610a6557600080fd5b818501915085601f830112610a7957600080fd5b815181811115610a8b57610a8b6109fb565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610ace57610ace6109fb565b604052918252848201925083810185019188831115610aec57600080fd5b938501935b82851015610b1157610b0285610a2a565b84529385019392850192610af1565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610b5b57610b5b610b1d565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610ba157610ba1610b60565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bde57610bde610b60565b500290565b600082610bf257610bf2610b1d565b500490565b60008219821115610c0a57610c0a610b60565b500190565b6000825160005b81811015610c305760208186018101518583015201610c16565b81811115610c3f576000828501525b509190910192915050565b600060208284031215610c5c57600080fd5b505191905056fea26469706673582212200fbfd25fde1421c53cb7e122270bf2224cbbbd46dd743565474e1b84253c576e64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}