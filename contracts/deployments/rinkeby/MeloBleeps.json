{
  "address": "0x284653800489e2c0E4471ae2B17f6aFf119A005D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialTokenURIAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialRoyaltyAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialMinterAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialGuardian",
          "type": "address"
        },
        {
          "internalType": "contract MeloBleepsTokenURI",
          "name": "initialTokenURIContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGuardian",
          "type": "address"
        }
      ],
      "name": "GuardianSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinterAdmin",
          "type": "address"
        }
      ],
      "name": "MinterAdminSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "MinterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRoyaltyAdmin",
          "type": "address"
        }
      ],
      "name": "RoyaltyAdminSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTokenURIAdmin",
          "type": "address"
        }
      ],
      "name": "TokenURIAdminSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract MeloBleepsTokenURI",
          "name": "newTokenURIContract",
          "type": "address"
        }
      ],
      "name": "TokenURIContractSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bleepsUsed",
      "outputs": [
        {
          "internalType": "uint104",
          "name": "num",
          "type": "uint104"
        },
        {
          "internalType": "uint152",
          "name": "value",
          "type": "uint152"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "creatorOf",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "artist",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "data1",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "data2",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minterAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "ownerAndLastTransferBlockNumberList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lastTransferBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC721Base.OwnerData[]",
          "name": "ownersData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGuardian",
          "type": "address"
        }
      ],
      "name": "setGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMinterAdmin",
          "type": "address"
        }
      ],
      "name": "setMinterAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRoyaltyAdmin",
          "type": "address"
        }
      ],
      "name": "setRoyaltyAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTokenURIAdmin",
          "type": "address"
        }
      ],
      "name": "setTokenURIAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract MeloBleepsTokenURI",
          "name": "newTokenURIContract",
          "type": "address"
        }
      ],
      "name": "setTokenURIContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenURIAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenURIContract",
      "outputs": [
        {
          "internalType": "contract MeloBleepsTokenURI",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb4e286d48096bbd29c4776fcd67bf27fff4e9ede287a7d3db379ee5bed9d4749",
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0x284653800489e2c0E4471ae2B17f6aFf119A005D",
    "transactionIndex": 22,
    "gasUsed": "2551446",
    "logsBloom": "0x
    "blockHash": "0xc4b01071945c2e48fe6d2bc20050e7a654ad5a5a6b971c4872c88bd23aa1d462",
    "transactionHash": "0xb4e286d48096bbd29c4776fcd67bf27fff4e9ede287a7d3db379ee5bed9d4749",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 9654611,
        "transactionHash": "0xb4e286d48096bbd29c4776fcd67bf27fff4e9ede287a7d3db379ee5bed9d4749",
        "address": "0x284653800489e2c0E4471ae2B17f6aFf119A005D",
        "topics": [
          "0x89de65ceb8cdf195a0b50021ed65dd305b54d3b744a0e283bd98c6058e2edd78"
        ],
        "data": "0x000000000000000000000000e53cd71271acadbeb0f64d9c8c62bbddc8ca9e66",
        "logIndex": 23,
        "blockHash": "0xc4b01071945c2e48fe6d2bc20050e7a654ad5a5a6b971c4872c88bd23aa1d462"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 9654611,
        "transactionHash": "0xb4e286d48096bbd29c4776fcd67bf27fff4e9ede287a7d3db379ee5bed9d4749",
        "address": "0x284653800489e2c0E4471ae2B17f6aFf119A005D",
        "topics": [
          "0xb17416b845258d996b82b66c3c9166088ec5edf592b35fcce47c62a73d61ef41"
        ],
        "data": "0x000000000000000000000000e53cd71271acadbeb0f64d9c8c62bbddc8ca9e66",
        "logIndex": 24,
        "blockHash": "0xc4b01071945c2e48fe6d2bc20050e7a654ad5a5a6b971c4872c88bd23aa1d462"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 9654611,
        "transactionHash": "0xb4e286d48096bbd29c4776fcd67bf27fff4e9ede287a7d3db379ee5bed9d4749",
        "address": "0x284653800489e2c0E4471ae2B17f6aFf119A005D",
        "topics": [
          "0xb8e0165b6664b7af8f9563c66e3d6b987c2d06fe192539d7123a0777b41a7c89"
        ],
        "data": "0x000000000000000000000000e53cd71271acadbeb0f64d9c8c62bbddc8ca9e66",
        "logIndex": 25,
        "blockHash": "0xc4b01071945c2e48fe6d2bc20050e7a654ad5a5a6b971c4872c88bd23aa1d462"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 9654611,
        "transactionHash": "0xb4e286d48096bbd29c4776fcd67bf27fff4e9ede287a7d3db379ee5bed9d4749",
        "address": "0x284653800489e2c0E4471ae2B17f6aFf119A005D",
        "topics": [
          "0x6bf5b09f847c9c9e97addeaf1ea9d5fd44ff6ae2c9c4aaf55fb476eca421a45d"
        ],
        "data": "0x00000000000000000000000013d7d24448ad46500732f64ab5e34164f2fcd865",
        "logIndex": 26,
        "blockHash": "0xc4b01071945c2e48fe6d2bc20050e7a654ad5a5a6b971c4872c88bd23aa1d462"
      }
    ],
    "blockNumber": 9654611,
    "cumulativeGasUsed": "4431776",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE53cd71271AcAdbeb0f64d9c8C62bBdDc8cA9e66",
    "0xE53cd71271AcAdbeb0f64d9c8C62bBdDc8cA9e66",
    "0xE53cd71271AcAdbeb0f64d9c8C62bBdDc8cA9e66",
    "0xE53cd71271AcAdbeb0f64d9c8C62bBdDc8cA9e66",
    "0xE53cd71271AcAdbeb0f64d9c8C62bBdDc8cA9e66",
    "0x13d7D24448ad46500732f64ab5e34164F2fcD865"
  ],
  "solcInputHash": "0e2e731014df5a08cb13ff366025c798",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialTokenURIAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialRoyaltyAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialMinterAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialGuardian\",\"type\":\"address\"},{\"internalType\":\"contract MeloBleepsTokenURI\",\"name\":\"initialTokenURIContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"GuardianSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinterAdmin\",\"type\":\"address\"}],\"name\":\"MinterAdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRoyaltyAdmin\",\"type\":\"address\"}],\"name\":\"RoyaltyAdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTokenURIAdmin\",\"type\":\"address\"}],\"name\":\"TokenURIAdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract MeloBleepsTokenURI\",\"name\":\"newTokenURIContract\",\"type\":\"address\"}],\"name\":\"TokenURIContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bleepsUsed\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"num\",\"type\":\"uint104\"},{\"internalType\":\"uint152\",\"name\":\"value\",\"type\":\"uint152\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"creatorOf\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"data1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"data2\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"ownerAndLastTransferBlockNumberList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastTransferBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC721Base.OwnerData[]\",\"name\":\"ownersData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinterAdmin\",\"type\":\"address\"}],\"name\":\"setMinterAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRoyaltyAdmin\",\"type\":\"address\"}],\"name\":\"setRoyaltyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenURIAdmin\",\"type\":\"address\"}],\"name\":\"setTokenURIAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MeloBleepsTokenURI\",\"name\":\"newTokenURIContract\",\"type\":\"address\"}],\"name\":\"setTokenURIContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURIAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURIContract\",\"outputs\":[{\"internalType\":\"contract MeloBleepsTokenURI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"balance\":\"The number of tokens owned by the address.\"}},\"constructor\":{\"params\":{\"initialGuardian\":\"guardian able to immortalize rules\",\"initialMinterAdmin\":\"admin able to set the minter contract.\",\"initialOwner\":\"address that can execute on behalf of Bleeps (example: can claim ENS name).\",\"initialRoyaltyAdmin\":\"admin able to update the royalty recipient and rates.\",\"initialTokenURIAdmin\":\"admin able to update the tokenURI contract.\",\"initialTokenURIContract\":\"initial tokenURI contract that generate the metadata including the wav file.\"}},\"getApproved(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"_0\":\"The address of the operator.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"isOperator\":\"The status of the approval.\"}},\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract.\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data.\"}},\"ownerAndLastTransferBlockNumberList(uint256[])\":{\"params\":{\"ids\":\"The list of token ids to check.\"},\"returns\":{\"ownersData\":\"The list of (owner, lastTransferBlockNumber) for each ids given as input.\"}},\"ownerOf(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"The id of the interface.\"},\"returns\":{\"_0\":\"Whether the interface is supported.\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the senders behalf.\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"guardian()\":{\"notice\":\"guardian has some special vetoing power to guide the direction of the DAO. It can only remove rights from the DAO. It could be used to immortalize rules.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator.\"},\"minter()\":{\"notice\":\"address allowed to mint, allow the sale contract to be separated from the token contract that can focus on the core logic\"},\"minterAdmin()\":{\"notice\":\"minterAdmin can update the minter. could be given to the DAO later so new mechanism of sales for Melobleeps can be tested.\"},\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed.\"},\"name()\":{\"notice\":\"A descriptive name for a collection of NFTs in this contract\"},\"owner()\":{\"notice\":\"the address of the current owner, that is able to execute on behalf of this contract.\"},\"ownerAndLastTransferBlockNumberList(uint256[])\":{\"notice\":\"Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism.\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"royaltyAdmin()\":{\"notice\":\"address allowed to set royalty parameters\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver know of the transfer.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"setGuardian(address)\":{\"notice\":\"set the new guardian that can freeze the other admins (except owner). Can only be called by the current guardian.\"},\"setMinter(address)\":{\"notice\":\"set the new minter that can mint Bleeps (up to 1024). Can only be called by the minter admin.\"},\"setMinterAdmin(address)\":{\"notice\":\"set the new minterAdmin that can set the minter for Bleeps Can only be called by the current minter admin.\"},\"setRoyaltyAdmin(address)\":{\"notice\":\"set the new royaltyAdmin that can change the royalties Can only be called by the current royalty admin.\"},\"setTokenURIAdmin(address)\":{\"notice\":\"set the new tokenURIAdmin that can change the tokenURI Can only be called by the current tokenURI admin.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface.\"},\"symbol()\":{\"notice\":\"An abbreviated name for NFTs in this contract\"},\"tokenURIAdmin()\":{\"notice\":\"maintainer can update the tokenURI contract, this is intended to be relinquished once the tokenURI has been heavily tested in the wild and that no modification are needed.\"},\"tokenURIContract()\":{\"notice\":\"the contract that actually generate the sound (and all metadata via the a data: uri as tokenURI)\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses.\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/melobleeps/MeloBleeps.sol\":\"MeloBleeps\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x2f27682302bd27f76399273e73cedecd2de098aa101401a3b5f2196f520da6c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"src/base/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\nabstract contract ERC721Base is IERC165, IERC721 {\\n    using Address for address;\\n\\n    bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n\\n    uint256 internal constant OPERATOR_FLAG = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant NOT_OPERATOR_FLAG = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    mapping(uint256 => uint256) internal _owners;\\n    mapping(address => uint256) internal _balances;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    mapping(uint256 => address) internal _operators;\\n\\n    function name() public pure virtual returns (string memory) {\\n        revert(\\\"NOT_IMPLEMENTED\\\");\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the senders behalf.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approve(address operator, uint256 id) external override {\\n        (address owner, uint256 blockNumber) = _ownerAndBlockNumberOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(msg.sender == owner || _operatorsForAll[owner][msg.sender], \\\"UNAUTHORIZED_APPROVAL\\\");\\n        _approveFor(owner, blockNumber, operator, id);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == from, \\\"NOT_OWNER\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(to != address(this), \\\"NOT_TO_THIS\\\");\\n        if (msg.sender != from) {\\n            require(\\n                _operatorsForAll[from][msg.sender] || (operatorEnabled && _operators[id] == msg.sender),\\n                \\\"UNAUTHORIZED_TRANSFER\\\"\\n            );\\n        }\\n        _transferFrom(from, to, id);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n    /// @param from The send of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @notice Get the number of tokens owned by an address.\\n    /// @param owner The address to look for.\\n    /// @return balance The number of tokens owned by the address.\\n    function balanceOf(address owner) public view override returns (uint256 balance) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS_OWNER\\\");\\n        balance = _balances[owner];\\n    }\\n\\n    /// @notice Get the owner of a token.\\n    /// @param id The id of the token.\\n    /// @return owner The address of the token owner.\\n    function ownerOf(uint256 id) external view override returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n    }\\n\\n    /// @notice Get the owner of a token and the blockNumber of the last transfer, useful to voting mechanism.\\n    /// @param id The id of the token.\\n    /// @return owner The address of the token owner.\\n    /// @return blockNumber The blocknumber at which the last transfer of that id happened.\\n    function ownerAndLastTransferBlockNumberOf(uint256 id) internal view returns (address owner, uint256 blockNumber) {\\n        return _ownerAndBlockNumberOf(id);\\n    }\\n\\n    struct OwnerData {\\n        address owner;\\n        uint256 lastTransferBlockNumber;\\n    }\\n\\n    /// @notice Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism.\\n    /// @param ids The list of token ids to check.\\n    /// @return ownersData The list of (owner, lastTransferBlockNumber) for each ids given as input.\\n    function ownerAndLastTransferBlockNumberList(uint256[] calldata ids)\\n        external\\n        view\\n        returns (OwnerData[] memory ownersData)\\n    {\\n        ownersData = new OwnerData[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 data = _owners[ids[i]];\\n            ownersData[i].owner = address(uint160(data));\\n            ownersData[i].lastTransferBlockNumber = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n        }\\n    }\\n\\n    /// @notice Get the approved operator for a specific token.\\n    /// @param id The id of the token.\\n    /// @return The address of the operator.\\n    function getApproved(uint256 id) external view override returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Check if the sender approved the operator.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool isOperator) {\\n        return _operatorsForAll[owner][operator];\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    /// @param data Additional data.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public override {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == from, \\\"NOT_OWNER\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(to != address(this), \\\"NOT_TO_THIS\\\");\\n        if (msg.sender != from) {\\n            require(\\n                (operatorEnabled && _operators[id] == msg.sender) || _operatorsForAll[from][msg.sender],\\n                \\\"UNAUTHORIZED_TRANSFER\\\"\\n            );\\n        }\\n        _safeTransferFrom(from, to, id, data);\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// @param id The id of the interface.\\n    /// @return Whether the interface is supported.\\n    function supportsInterface(bytes4 id) public pure virtual override returns (bool) {\\n        /// 0x01ffc9a7 is ERC165.\\n        /// 0x80ac58cd is ERC721\\n        /// 0x5b5e139f is for ERC721 metadata\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n    }\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal {\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(_checkOnERC721Received(msg.sender, from, to, id, data), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal virtual {}\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal {\\n        _beforeTokenTransfer(from, to, id);\\n        unchecked {\\n            _balances[to]++;\\n            if (from != address(0)) {\\n                _balances[from]--;\\n            }\\n        }\\n        _owners[id] = (block.number << 160) | uint256(uint160(to));\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /// @dev See approve.\\n    function _approveFor(\\n        address owner,\\n        uint256 blockNumber,\\n        address operator,\\n        uint256 id\\n    ) internal {\\n        if (operator == address(0)) {\\n            _owners[id] = (blockNumber << 160) | uint256(uint160(owner));\\n        } else {\\n            _owners[id] = OPERATOR_FLAG | (blockNumber << 160) | uint256(uint160(owner));\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /// @dev See setApprovalForAll.\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param id The id of the token we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x150b7a02 is returned.\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721Receiver(to).onERC721Received(operator, from, id, _data);\\n        return (retval == ERC721_RECEIVED);\\n    }\\n\\n    /// @dev See ownerOf\\n    function _ownerOf(uint256 id) internal view returns (address owner) {\\n        return address(uint160(_owners[id]));\\n    }\\n\\n    /// @dev Get the owner and operatorEnabled status of a token.\\n    /// @param id The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _ownerAndOperatorEnabledOf(uint256 id) internal view returns (address owner, bool operatorEnabled) {\\n        uint256 data = _owners[id];\\n        owner = address(uint160(data));\\n        operatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n    }\\n\\n    // @dev Get the owner and operatorEnabled status of a token.\\n    /// @param id The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return blockNumber the blockNumber at which the owner became the owner (last transfer).\\n    function _ownerAndBlockNumberOf(uint256 id) internal view returns (address owner, uint256 blockNumber) {\\n        uint256 data = _owners[id];\\n        owner = address(uint160(data));\\n        blockNumber = (data >> 160) & 0xFFFFFFFFFFFFFFFFFFFFFF;\\n    }\\n\\n    // from https://github.com/Uniswap/v3-periphery/blob/main/contracts/base/Multicall.sol\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed.\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param data The encoded function data for each of the calls to make to this contract.\\n    /// @return results The results from each of the calls passed in via data.\\n    function multicall(bytes[] calldata data) public payable returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf46f600d4f4bc22ca96a8bdf981e397637a83046053575dbb784f65f54d728e\",\"license\":\"AGPL-1.0\"},\"src/melobleeps/MeloBleeps.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../base/ERC721Base.sol\\\";\\nimport \\\"./MeloBleepsRoles.sol\\\";\\nimport \\\"./MeloBleepsTokenURI.sol\\\";\\n\\ncontract MeloBleeps is ERC721Base, MeloBleepsRoles {\\n    event TokenURIContractSet(MeloBleepsTokenURI newTokenURIContract);\\n\\n    /// @notice the contract that actually generate the sound (and all metadata via the a data: uri as tokenURI)\\n    MeloBleepsTokenURI public tokenURIContract;\\n\\n    struct Melody {\\n        bytes32 data1;\\n        bytes32 data2;\\n        address payable artist;\\n    }\\n    mapping(uint256 => Melody) internal _melodies;\\n    uint256 _supply = 0;\\n\\n    struct BleepUsed {\\n        uint104 num;\\n        uint152 value;\\n    }\\n    mapping(uint256 => BleepUsed) public bleepsUsed;\\n\\n    /// @dev Create the MeloBleeps contract\\n    //TODO: openseaProxyRegistry allow Bleeps to be sold on opensea without prior approval tx as long as the user have already an opensea proxy.\\n    /// @param initialOwner address that can execute on behalf of Bleeps (example: can claim ENS name).\\n    /// @param initialTokenURIAdmin admin able to update the tokenURI contract.\\n    /// @param initialRoyaltyAdmin admin able to update the royalty recipient and rates.\\n    /// @param initialMinterAdmin admin able to set the minter contract.\\n    /// @param initialGuardian guardian able to immortalize rules\\n    /// @param initialTokenURIContract initial tokenURI contract that generate the metadata including the wav file.\\n    constructor(\\n        address initialOwner,\\n        address initialTokenURIAdmin,\\n        address initialRoyaltyAdmin,\\n        address initialMinterAdmin,\\n        address initialGuardian,\\n        MeloBleepsTokenURI initialTokenURIContract\\n    ) MeloBleepsRoles(initialOwner, initialTokenURIAdmin, initialRoyaltyAdmin, initialMinterAdmin, initialGuardian) {\\n        tokenURIContract = initialTokenURIContract;\\n        emit TokenURIContractSet(initialTokenURIContract);\\n    }\\n\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() public pure override returns (string memory) {\\n        return \\\"MeloBleeps, Melodies of Bleeps\\\";\\n    }\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external pure returns (string memory) {\\n        return \\\"MBLEEP\\\";\\n    }\\n\\n    function tokenURI(uint256 id) external view returns (string memory) {\\n        bytes32 d1 = _melodies[id].data1;\\n        bytes32 d2 = _melodies[id].data2;\\n        return tokenURIContract.wav(d1, d2);\\n    }\\n\\n    function setTokenURIContract(MeloBleepsTokenURI newTokenURIContract) external {\\n        require(msg.sender == tokenURIAdmin, \\\"NOT_AUTHORIZED\\\");\\n        tokenURIContract = newTokenURIContract;\\n        emit TokenURIContractSet(newTokenURIContract);\\n    }\\n\\n    function mint(\\n        address payable artist,\\n        bytes32 data1,\\n        bytes32 data2,\\n        address to\\n    ) external returns (uint256 id) {\\n        // TODO prevent same one\\n        // record bleeps used and value\\n        require(msg.sender == minter, \\\"ONLY_MINTER_ALLOWED\\\");\\n        id = ++_supply;\\n        _melodies[id] = Melody(data1, data2, artist);\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(to != address(this), \\\"NOT_TO_THIS\\\");\\n        // _safeTransferFrom(address(0), to, id, \\\"\\\");\\n        _transferFrom(address(0), to, id);\\n    }\\n\\n    function creatorOf(uint256 id) external view returns (address payable) {\\n        return _melodies[id].artist;\\n    }\\n}\\n\",\"keccak256\":\"0xecdea0d798d1126e555ecbf3931a3ae9c3484bdac64b5ae13000972a2c88dff2\",\"license\":\"AGPL-1.0\"},\"src/melobleeps/MeloBleepsRoles.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.9;\\n\\ncontract MeloBleepsRoles {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    event TokenURIAdminSet(address newTokenURIAdmin);\\n    event RoyaltyAdminSet(address newRoyaltyAdmin);\\n    event MinterAdminSet(address newMinterAdmin);\\n    event GuardianSet(address newGuardian);\\n    event MinterSet(address newMinter);\\n\\n    ///@notice the address of the current owner, that is able to execute on behalf of this contract.\\n    address public owner;\\n\\n    /// @notice maintainer can update the tokenURI contract, this is intended to be relinquished once the tokenURI has been heavily tested in the wild and that no modification are needed.\\n    address public tokenURIAdmin;\\n\\n    /// @notice address allowed to set royalty parameters\\n    address public royaltyAdmin;\\n\\n    /// @notice minterAdmin can update the minter.\\n    /// could be given to the DAO later so new mechanism of sales for Melobleeps can be tested.\\n    address public minterAdmin;\\n\\n    /// @notice address allowed to mint, allow the sale contract to be separated from the token contract that can focus on the core logic\\n    address public minter;\\n\\n    /// @notice guardian has some special vetoing power to guide the direction of the DAO. It can only remove rights from the DAO. It could be used to immortalize rules.\\n    address public guardian;\\n\\n    constructor(\\n        address initialOwner,\\n        address initialTokenURIAdmin,\\n        address initialMinterAdmin,\\n        address initialRoyaltyAdmin,\\n        address initialGuardian\\n    ) {\\n        owner = initialOwner;\\n        tokenURIAdmin = initialTokenURIAdmin;\\n        royaltyAdmin = initialRoyaltyAdmin;\\n        minterAdmin = initialMinterAdmin;\\n        emit TokenURIAdminSet(initialTokenURIAdmin);\\n        emit RoyaltyAdminSet(initialRoyaltyAdmin);\\n        emit MinterAdminSet(initialMinterAdmin);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external {\\n        address oldOwner = owner;\\n        require(msg.sender == oldOwner);\\n        owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @notice set the new tokenURIAdmin that can change the tokenURI\\n     * Can only be called by the current tokenURI admin.\\n     */\\n    function setTokenURIAdmin(address newTokenURIAdmin) external {\\n        require(\\n            msg.sender == tokenURIAdmin || (msg.sender == guardian && newTokenURIAdmin == address(0)),\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n        tokenURIAdmin = newTokenURIAdmin;\\n        emit TokenURIAdminSet(newTokenURIAdmin);\\n    }\\n\\n    /**\\n     * @notice set the new royaltyAdmin that can change the royalties\\n     * Can only be called by the current royalty admin.\\n     */\\n    function setRoyaltyAdmin(address newRoyaltyAdmin) external {\\n        require(\\n            msg.sender == royaltyAdmin || (msg.sender == guardian && newRoyaltyAdmin == address(0)),\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n        royaltyAdmin = newRoyaltyAdmin;\\n        emit RoyaltyAdminSet(newRoyaltyAdmin);\\n    }\\n\\n    /**\\n     * @notice set the new minterAdmin that can set the minter for Bleeps\\n     * Can only be called by the current minter admin.\\n     */\\n    function setMinterAdmin(address newMinterAdmin) external {\\n        require(\\n            msg.sender == minterAdmin || (msg.sender == guardian && newMinterAdmin == address(0)),\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n        minterAdmin = newMinterAdmin;\\n        emit MinterAdminSet(newMinterAdmin);\\n    }\\n\\n    /**\\n     * @notice set the new guardian that can freeze the other admins (except owner).\\n     * Can only be called by the current guardian.\\n     */\\n    function setGuardian(address newGuardian) external {\\n        require(msg.sender == guardian, \\\"NOT_AUTHORIZED\\\");\\n        guardian = newGuardian;\\n        emit GuardianSet(newGuardian);\\n    }\\n\\n    /**\\n     * @notice set the new minter that can mint Bleeps (up to 1024).\\n     * Can only be called by the minter admin.\\n     */\\n    function setMinter(address newMinter) external {\\n        require(msg.sender == minterAdmin, \\\"NOT_AUTHORIZED\\\");\\n        minter = newMinter;\\n        emit MinterSet(newMinter);\\n    }\\n}\\n\",\"keccak256\":\"0xea3cf8e359fd6fd5c95d48132a6634fe3692ae949c8f10ea602db3e6f31d8adc\",\"license\":\"AGPL-1.0\"},\"src/melobleeps/MeloBleepsTokenURI.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.9;\\n\\n/* solhint-disable quotes */\\n\\ncontract MeloBleepsTokenURI {\\n    string internal constant TABLE_ENCODE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    bytes internal constant FREQUENCIES =\\n        hex\\\"00198d001b12001cae001e6200203100221b00242200264800288f002af8002d8600303b00331900362300395b003cc4004061004435004844004c9000511d0055f0005b0c006076006633006c460072b60079890080c300886b00908700992000a23a00abe000b61800c0ec00cc6500d88d00e56d00f3110101850110d601210f01323f0144750157c0016c310181d90198ca01b11901cada01e62302030b0221ab02421e02647e0288ea02af8002d8620303b10331940362320395b403cc4604061604435704843c04c8fc0511d4055f0005b0c306076306632906c464072b6707988b080c2c0886ad0908770991f90a23a80abe000b61860c0ec5\\\";\\n\\n    // settings for sound quality\\n    uint256 internal constant SAMPLE_RATE = 11000;\\n    uint256 internal constant BYTES_PER_SAMPLE = 1;\\n\\n    // constants for ensuring enough precision when computing values\\n    int256 internal constant ONE = 1000000;\\n    int256 internal constant HUNDRED = 100000000;\\n    int256 internal constant TWO = 2000000; // 2 * ONE;\\n    int256 internal constant FOUR = 4000000;\\n    int256 internal constant EIGHT = 8000000;\\n    int256 internal constant HALF = 500000; // ONE/ 2;\\n    int256 internal constant ZERO7 = 700000; // (ONE * 7) / 10;\\n    int256 internal constant ZERO3 = 300000; // (ONE * 3) / 10;\\n    int256 internal constant ZERO1 = 100000; //(ONE * 1) / 10;\\n    int256 internal constant ZERO3125 = 312500; //( ONE * 3125) / 10000;\\n    int256 internal constant ZERO8750 = 875000; // (ONE * 8750) / 10000;\\n    int256 internal constant MINUS_ONE = -1000000; //; -ONE;\\n    int256 internal constant MIN_VALUE = MINUS_ONE + 1;\\n    int256 internal constant MAX_VALUE = ONE - 1;\\n\\n    function wav(bytes32 d1, bytes32 d2) external pure returns (string memory) {\\n        return _generateWav(d1, d2);\\n    }\\n\\n    function _prepareBuffer(bytes memory buffer) internal pure returns (uint256) {\\n        bytes memory start = bytes.concat(\\n            'data:application/json,{\\\"name\\\":\\\"',\\n            \\\"hello\\\",\\n            '\\\",\\\"description\\\":\\\"A_sound_fully_generated_onchain\\\",\\\"external_url\\\":\\\"',\\n            \\\"https://hello\\\",\\n            \\\"\\\\\\\",\\\\\\\"image\\\\\\\":\\\\\\\"data:image/svg+xml,<svg viewBox='0 0 32 16' ><text x='50%' y='50%' dominant-baseline='middle' text-anchor='middle' style='fill: rgb(219, 39, 119); font-size: 12px;'>\\\",\\n            \\\"hello\\\",\\n            '</text></svg>\\\",\\\"animation_url\\\":\\\"data:audio/wav;base64,UklGRgAAAABXQVZFZm10IBAAAAABAAEA+CoAAPBVAAABAAgAZGF0YQAA'\\n        ); // missing 2 zero bytes\\n        uint256 len = start.length;\\n        uint256 src;\\n        uint256 dest;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            src := add(start, 0x20)\\n            dest := add(buffer, 0x20)\\n        }\\n        for (; len >= 32; len -= 32) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n        // TODO remove that step by ensuring the length is a multiple of 32 bytes\\n        uint256 mask = 256**(32 - len) - 1;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n        return start.length;\\n    }\\n\\n    function _finishBuffer(\\n        bytes memory buffer,\\n        uint256 resultPtr,\\n        uint256 tablePtr,\\n        uint256 numSamplesPlusOne,\\n        uint256 startLength\\n    ) internal pure {\\n        // write ends + size in buffer\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore8(resultPtr, 0x22) // \\\"\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, 0x7D) // }\\n            resultPtr := add(resultPtr, 1)\\n            mstore(buffer, sub(sub(resultPtr, buffer), 32))\\n        }\\n\\n        // compute chnksize (TODO hardcode)\\n        uint256 filesizeMinus8 = ((numSamplesPlusOne - 1) * 2 + 44) - 8;\\n        uint256 chunkSize = filesizeMinus8 + 8 - 44;\\n\\n        // filesize // 46 00 00\\n        resultPtr = startLength + 32 - 52;\\n        assembly {\\n            resultPtr := add(buffer, resultPtr)\\n            let v := shl(40, 0x46)\\n            v := add(v, shl(32, and(filesizeMinus8, 255)))\\n            v := add(v, shl(24, and(shr(8, filesizeMinus8), 255)))\\n            v := add(v, shl(16, and(shr(16, filesizeMinus8), 255)))\\n            v := add(v, shl(8, and(shr(24, filesizeMinus8), 255)))\\n            v := add(v, 0x57)\\n            // write 8 characters\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(42, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(36, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(30, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(24, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(18, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(12, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(6, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(v, 0x3F))))\\n        }\\n\\n        // // // chunksize // 61 00 00\\n        resultPtr = startLength + 32 - 4;\\n        assembly {\\n            resultPtr := add(buffer, resultPtr)\\n            let v := shl(40, 0x61)\\n            v := add(v, shl(32, and(chunkSize, 255)))\\n            v := add(v, shl(24, and(shr(8, chunkSize), 255)))\\n            v := add(v, shl(16, and(shr(16, chunkSize), 255)))\\n            v := add(v, shl(8, and(shr(24, chunkSize), 255)))\\n            v := add(v, 0x57)\\n            // write 8 characters\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(42, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(36, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(30, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(24, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(18, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(12, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(6, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(v, 0x3F))))\\n        }\\n    }\\n\\n    function _generateWav(bytes32 d1, bytes32 d2) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(500000);\\n        uint256 startLength = _prepareBuffer(buffer);\\n\\n        string memory table = TABLE_ENCODE;\\n        uint256 tablePtr;\\n        uint256 resultPtr = startLength + 32;\\n        assembly {\\n            // prepare the lookup table\\n            tablePtr := add(table, 1)\\n\\n            // set write pointer\\n            resultPtr := add(buffer, resultPtr)\\n        }\\n\\n        bytes memory freqTable = FREQUENCIES;\\n\\n        uint256 numSamplesPlusOne = (3 * (((32 * (61 * 16 * SAMPLE_RATE)) / (7350)) + 1)) / 3; //3 * 3 * ((22050 + 3) / 3); // 8 = speed\\n\\n        uint256[] memory noise_handler = new uint256[](4);\\n\\n        // console.log(\\\"numSamplesPlusOne %i\\\", numSamplesPlusOne);\\n        int256 pos = 0;\\n\\n        for (uint256 i = 0; i < numSamplesPlusOne; i += 3) {\\n            assembly {\\n                function abs(a) -> b {\\n                    b := a\\n                    if slt(b, 0) {\\n                        b := sub(0, b)\\n                    }\\n                }\\n\\n                let meloIndex := div(i, div(numSamplesPlusOne, 32)) // TODO numSamples\\n                let data := d1\\n                if gt(meloIndex, 15) {\\n                    data := d2\\n                    meloIndex := sub(meloIndex, 16)\\n                    if gt(meloIndex, 15) {\\n                        meloIndex := 15\\n                    }\\n                }\\n                data := and(shr(add(16, mul(sub(16, meloIndex), 16)), data), 0xFFFF) // sub(15) is to divide the data in 2\\n                let note := and(data, 0x3F)\\n                let instr := and(shr(6, data), 0x0F)\\n                let vol := mul(and(shr(10, data), 0x07), 100)\\n\\n                let posStep := div(\\n                    mul(and(shr(232, mload(add(freqTable, add(32, mul(note, 3))))), 0xFFFFFF), 10000),\\n                    SAMPLE_RATE\\n                )\\n\\n                let v := 0\\n                for {\\n                    let c := 0\\n                } lt(c, 3) {\\n                    c := add(c, 1)\\n                } {\\n                    let intValue := 0\\n                    // skip first value as it pertain to the double bytes for chunksize\\n                    if gt(pos, 0) {\\n                        // tri\\n                        if eq(instr, 0) {\\n                            // triangle\\n\\n                            intValue := abs(sub(mul(mod(pos, ONE), 2), ONE))\\n                            intValue := sub(mul(intValue, 2), ONE)\\n                            intValue := sdiv(intValue, 2)\\n                        }\\n                        if eq(instr, 1) {\\n                            // tilted saw (uneven_tri)\\n                            let tmp := smod(pos, ONE)\\n                            if slt(tmp, ZERO8750) {\\n                                intValue := sdiv(mul(tmp, 16), 7)\\n                            }\\n                            if sgt(tmp, ZERO8750) {\\n                                intValue := mul(sub(ONE, tmp), 16)\\n                            }\\n                            if eq(tmp, ZERO8750) {\\n                                intValue := mul(sub(ONE, tmp), 16)\\n                            }\\n                            intValue := sdiv(mul(sub(intValue, ONE), HALF), ONE)\\n                        }\\n                        if eq(instr, 2) {\\n                            // saw\\n                            intValue := sdiv(mul(sub(smod(pos, ONE), HALF), ZERO7), ONE)\\n                        }\\n                        if eq(instr, 3) {\\n                            // square\\n                            let tmp := smod(pos, ONE)\\n                            intValue := MINUS_ONE\\n                            if lt(tmp, HALF) {\\n                                intValue := ONE\\n                            }\\n                            intValue := sdiv(intValue, 4)\\n                        }\\n                        if eq(instr, 4) {\\n                            // pulse\\n                            let tmp := smod(pos, ONE)\\n                            intValue := MINUS_ONE\\n                            if lt(tmp, ZERO3125) {\\n                                intValue := ONE\\n                            }\\n                            intValue := sdiv(intValue, 4)\\n                        }\\n                        if eq(instr, 5) {\\n                            // organ (tri2)\\n                            intValue := mul(pos, 4)\\n                            intValue := sdiv(\\n                                mul(\\n                                    sub(\\n                                        sub(\\n                                            add(\\n                                                abs(sub(smod(intValue, TWO), ONE)),\\n                                                sdiv(\\n                                                    sub(abs(sub(smod(sdiv(mul(intValue, HALF), ONE), TWO), ONE)), HALF),\\n                                                    2\\n                                                )\\n                                            ),\\n                                            HALF\\n                                        ),\\n                                        ZERO1\\n                                    ),\\n                                    HALF\\n                                ),\\n                                ONE\\n                            )\\n                        }\\n                        if eq(instr, 6) {\\n                            // phaser (detuned_tri)\\n                            intValue := mul(pos, 2)\\n                            intValue := add(\\n                                sub(abs(sub(smod(intValue, TWO), ONE)), HALF),\\n                                sub(\\n                                    sdiv(sub(abs(sub(smod(sdiv(mul(intValue, 127), 128), TWO), ONE)), HALF), 2),\\n                                    sdiv(ONE, 4)\\n                                )\\n                            )\\n                        }\\n                        if eq(instr, 7) {\\n                            // noise\\n                            let rand := mload(add(noise_handler, 32))\\n                            let lastx := mload(add(noise_handler, 64))\\n                            let sample := mload(add(noise_handler, 96))\\n                            let lsample := mload(add(noise_handler, 128))\\n                            rand := mod(add(mul(1103515245, rand), 12345), 0x80000000)\\n                            let scale := div(mul(sub(pos, lastx), FOUR), 160000)\\n                            lsample := sample\\n                            sample := sdiv(\\n                                mul(add(lsample, scale), sub(div(mul(rand, TWO), 0x80000000), ONE)),\\n                                add(ONE, scale)\\n                            )\\n                            lastx := pos\\n                            intValue := sdiv(\\n                                mul(sdiv(mul(add(lsample, sample), 4), 3), sub(175, mul(scale, 100))),\\n                                HUNDRED\\n                            )\\n                            if slt(intValue, MINUS_ONE) {\\n                                intValue := MINUS_ONE\\n                            }\\n                            if sgt(intValue, ONE) {\\n                                intValue := ONE\\n                            }\\n                            intValue := sdiv(mul(intValue, 5), 10)\\n                            mstore(add(noise_handler, 32), rand)\\n                            mstore(add(noise_handler, 64), lastx)\\n                            mstore(add(noise_handler, 96), sample)\\n                            mstore(add(noise_handler, 128), lsample)\\n                        }\\n                        if eq(instr, 8) {\\n                            intValue := mul(pos, 2)\\n                            intValue := sdiv(\\n                                mul(\\n                                    add(\\n                                        sub(sub(smod(intValue, TWO), ONE), HALF),\\n                                        sub(\\n                                            sdiv(sub(sub(smod(sdiv(mul(intValue, 127), 128), TWO), ONE), HALF), 2),\\n                                            sdiv(ONE, 4)\\n                                        )\\n                                    ),\\n                                    5\\n                                ),\\n                                7\\n                            )\\n                        }\\n                        intValue := sdiv(mul(intValue, vol), 700)\\n                        intValue := add(sdiv(mul(intValue, 256), TWO), 128)\\n                    }\\n                    v := add(v, shl(sub(16, mul(c, 8)), intValue))\\n                    pos := add(pos, posStep)\\n                }\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, v), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, v), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, v), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(v, 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n        }\\n\\n        _finishBuffer(buffer, resultPtr, tablePtr, numSamplesPlusOne, startLength);\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x91e18171d0f6b9a5a4eef2536bb18d7956c7328f7fff7fcad963824e17290855\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x60806040526000600c553480156200001657600080fd5b5060405162002d9d38038062002d9d8339810160408190526200003991620001bd565b600480546001600160a01b038881166001600160a01b031992831617909255600580548884169083168117909155600680548785169084161790556007805493881693909216929092179055604051908152869086908690869086907f89de65ceb8cdf195a0b50021ed65dd305b54d3b744a0e283bd98c6058e2edd789060200160405180910390a16040516001600160a01b03831681527fb17416b845258d996b82b66c3c9166088ec5edf592b35fcce47c62a73d61ef419060200160405180910390a16040516001600160a01b03841681527fb8e0165b6664b7af8f9563c66e3d6b987c2d06fe192539d7123a0777b41a7c899060200160405180910390a15050600a80546001600160a01b0319166001600160a01b0386169081179091556040519081527f6bf5b09f847c9c9e97addeaf1ea9d5fd44ff6ae2c9c4aaf55fb476eca421a45d93506020019150620001909050565b60405180910390a150505050505062000251565b6001600160a01b0381168114620001ba57600080fd5b50565b60008060008060008060c08789031215620001d757600080fd5b8651620001e481620001a4565b6020880151909650620001f781620001a4565b60408801519095506200020a81620001a4565b60608801519094506200021d81620001a4565b60808801519093506200023081620001a4565b60a08801519092506200024381620001a4565b809150509295509295509295565b612b3c80620002616000396000f3fe6080604052600436106101e35760003560e01c806382fc314711610102578063ac9650d811610095578063e985e9c511610064578063e985e9c514610705578063f2fde38b1461075b578063f39452821461077b578063fca3b5aa146107a857600080fd5b8063ac9650d814610608578063b88d4fde14610628578063c87b56dd14610648578063db2afcdf1461066857600080fd5b806395d89b41116100d157806395d89b411461055557806399235f391461059b578063a22cb465146105bb578063a754d48f146105db57600080fd5b806382fc3147146104bb578063894e851f146104db5780638a0dac4a146105085780638da5cb5b1461052857600080fd5b8063452a93201161017a578063639147af11610149578063639147af1461042e578063698f87be1461044e57806370a082311461047b5780637ba9638b1461049b57600080fd5b8063452a93201461036d578063589a17431461039a5780635bffff1d146103e05780636352211e1461040e57600080fd5b8063095ea7b3116101b6578063095ea7b3146102de57806323b872dd1461030057806334dd800d1461032057806342842e0e1461034d57600080fd5b806301ffc9a7146101e857806306fdde031461021d578063075461721461026c578063081812fc146102be575b600080fd5b3480156101f457600080fd5b50610208610203366004612417565b6107c8565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b5060408051808201909152601e81527f4d656c6f426c656570732c204d656c6f64696573206f6620426c65657073000060208201525b60405161021491906124b1565b34801561027857600080fd5b506008546102999073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610214565b3480156102ca57600080fd5b506102996102d93660046124c4565b6108ad565b3480156102ea57600080fd5b506102fe6102f93660046124ff565b61099e565b005b34801561030c57600080fd5b506102fe61031b36600461252b565b610b08565b34801561032c57600080fd5b506005546102999073ffffffffffffffffffffffffffffffffffffffff1681565b34801561035957600080fd5b506102fe61036836600461252b565b610e4a565b34801561037957600080fd5b506009546102999073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103a657600080fd5b506102996103b53660046124c4565b6000908152600b602052604090206002015473ffffffffffffffffffffffffffffffffffffffff1690565b3480156103ec57600080fd5b506104006103fb36600461256c565b610e6a565b604051908152602001610214565b34801561041a57600080fd5b506102996104293660046124c4565b611080565b34801561043a57600080fd5b506102fe6104493660046125b6565b611111565b34801561045a57600080fd5b50600a546102999073ffffffffffffffffffffffffffffffffffffffff1681565b34801561048757600080fd5b506104006104963660046125b6565b61124d565b3480156104a757600080fd5b506102fe6104b63660046125b6565b6112f5565b3480156104c757600080fd5b506102fe6104d63660046125b6565b61142a565b3480156104e757600080fd5b506006546102999073ffffffffffffffffffffffffffffffffffffffff1681565b34801561051457600080fd5b506102fe6105233660046125b6565b61151e565b34801561053457600080fd5b506004546102999073ffffffffffffffffffffffffffffffffffffffff1681565b34801561056157600080fd5b5060408051808201909152600681527f4d424c4545500000000000000000000000000000000000000000000000000000602082015261025f565b3480156105a757600080fd5b506102fe6105b63660046125b6565b611612565b3480156105c757600080fd5b506102fe6105d63660046125d3565b611747565b3480156105e757600080fd5b506007546102999073ffffffffffffffffffffffffffffffffffffffff1681565b61061b61061636600461265d565b611756565b604051610214919061269f565b34801561063457600080fd5b506102fe6106433660046127e3565b6118c8565b34801561065457600080fd5b5061025f6106633660046124c4565b611c0d565b34801561067457600080fd5b506106cc6106833660046124c4565b600d602052600090815260409020546cffffffffffffffffffffffffff8116906d0100000000000000000000000000900472ffffffffffffffffffffffffffffffffffffff1682565b604080516cffffffffffffffffffffffffff909316835272ffffffffffffffffffffffffffffffffffffff909116602083015201610214565b34801561071157600080fd5b50610208610720366004612892565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260026020908152604080832093909416825291909152205460ff1690565b34801561076757600080fd5b506102fe6107763660046125b6565b611cf0565b34801561078757600080fd5b5061079b61079636600461265d565b611d8b565b60405161021491906128c0565b3480156107b457600080fd5b506102fe6107c33660046125b6565b611ebe565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061085b57507f80ac58cd000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b806108a757507f5b5e139f000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6000818152602081905260408120547f80000000000000000000000000000000000000000000000000000000000000008082161473ffffffffffffffffffffffffffffffffffffffff8216610963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064015b60405180910390fd5b80156109945750505060009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b5060009392505050565b6000818152602081905260409020546affffffffffffffffffffff60a082901c1673ffffffffffffffffffffffffffffffffffffffff8216610a3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161095a565b3373ffffffffffffffffffffffffffffffffffffffff83161480610a90575073ffffffffffffffffffffffffffffffffffffffff8216600090815260026020908152604080832033845290915290205460ff165b610af6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c0000000000000000000000604482015260640161095a565b610b0282828686611fb2565b50505050565b6000818152602081905260409020547f80000000000000000000000000000000000000000000000000000000000000008082161473ffffffffffffffffffffffffffffffffffffffff8216610bb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161095a565b8473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610c4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015260640161095a565b73ffffffffffffffffffffffffffffffffffffffff8416610ccb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161095a565b73ffffffffffffffffffffffffffffffffffffffff8416301415610d4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e4f545f544f5f54484953000000000000000000000000000000000000000000604482015260640161095a565b3373ffffffffffffffffffffffffffffffffffffffff861614610e385773ffffffffffffffffffffffffffffffffffffffff8516600090815260026020908152604080832033845290915290205460ff1680610dd25750808015610dd2575060008381526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1633145b610e38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015260640161095a565b610e438585856120eb565b5050505050565b610e65838383604051806020016040528060008152506118c8565b505050565b60085460009073ffffffffffffffffffffffffffffffffffffffff163314610eee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4f4e4c595f4d494e5445525f414c4c4f57454400000000000000000000000000604482015260640161095a565b600c60008154610efd90612925565b918290555060408051606081018252868152602080820187815273ffffffffffffffffffffffffffffffffffffffff8a81168486019081526000878152600b90945294909220925183555160018301559151600290910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169183169190911790559091508216610fec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161095a565b73ffffffffffffffffffffffffffffffffffffffff821630141561106c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e4f545f544f5f54484953000000000000000000000000000000000000000000604482015260640161095a565b611078600083836120eb565b949350505050565b60008181526020819052604090205473ffffffffffffffffffffffffffffffffffffffff811661110c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161095a565b919050565b60055473ffffffffffffffffffffffffffffffffffffffff1633148061116d575060095473ffffffffffffffffffffffffffffffffffffffff163314801561116d575073ffffffffffffffffffffffffffffffffffffffff8116155b6111d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161095a565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f89de65ceb8cdf195a0b50021ed65dd305b54d3b744a0e283bd98c6058e2edd78906020015b60405180910390a150565b600073ffffffffffffffffffffffffffffffffffffffff82166112cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5a45524f5f414444524553535f4f574e45520000000000000000000000000000604482015260640161095a565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b60065473ffffffffffffffffffffffffffffffffffffffff16331480611351575060095473ffffffffffffffffffffffffffffffffffffffff1633148015611351575073ffffffffffffffffffffffffffffffffffffffff8116155b6113b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161095a565b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fb17416b845258d996b82b66c3c9166088ec5edf592b35fcce47c62a73d61ef4190602001611242565b60055473ffffffffffffffffffffffffffffffffffffffff1633146114ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161095a565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f6bf5b09f847c9c9e97addeaf1ea9d5fd44ff6ae2c9c4aaf55fb476eca421a45d90602001611242565b60095473ffffffffffffffffffffffffffffffffffffffff16331461159f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161095a565b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fe6c09ffe4572dc9ceaa5ddde4ae41befa655d6fdfe8052077af0970f700e942e90602001611242565b60075473ffffffffffffffffffffffffffffffffffffffff1633148061166e575060095473ffffffffffffffffffffffffffffffffffffffff163314801561166e575073ffffffffffffffffffffffffffffffffffffffff8116155b6116d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161095a565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fb8e0165b6664b7af8f9563c66e3d6b987c2d06fe192539d7123a0777b41a7c8990602001611242565b6117523383836121cf565b5050565b60608167ffffffffffffffff8111156117715761177161271f565b6040519080825280602002602001820160405280156117a457816020015b606081526020019060019003908161178f5790505b50905060005b828110156118c157600080308686858181106117c8576117c8612985565b90506020028101906117da91906129b4565b6040516117e8929190612a19565b600060405180830381855af49150503d8060008114611823576040519150601f19603f3d011682016040523d82523d6000602084013e611828565b606091505b50915091508161188e5760448151101561184157600080fd5b6004810190508080602001905181019061185b9190612a29565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095a91906124b1565b808484815181106118a1576118a1612985565b6020026020010181905250505080806118b990612925565b9150506117aa565b5092915050565b6000828152602081905260409020547f80000000000000000000000000000000000000000000000000000000000000008082161473ffffffffffffffffffffffffffffffffffffffff8216611979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161095a565b8573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611a0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015260640161095a565b73ffffffffffffffffffffffffffffffffffffffff8516611a8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161095a565b73ffffffffffffffffffffffffffffffffffffffff8516301415611b0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e4f545f544f5f54484953000000000000000000000000000000000000000000604482015260640161095a565b3373ffffffffffffffffffffffffffffffffffffffff871614611bf957808015611b58575060008481526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1633145b80611b93575073ffffffffffffffffffffffffffffffffffffffff8616600090815260026020908152604080832033845290915290205460ff165b611bf9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015260640161095a565b611c0586868686612267565b505050505050565b6000818152600b6020526040908190208054600190910154600a5492517fd63fab2b000000000000000000000000000000000000000000000000000000008152600481018390526024810182905260609373ffffffffffffffffffffffffffffffffffffffff169063d63fab2b9060440160006040518083038186803b158015611c9657600080fd5b505afa158015611caa573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526110789190810190612a29565b60045473ffffffffffffffffffffffffffffffffffffffff16338114611d1557600080fd5b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84811691821790925560405190918316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60608167ffffffffffffffff811115611da657611da661271f565b604051908082528060200260200182016040528015611deb57816020015b6040805180820190915260008082526020820152815260200190600190039081611dc45790505b50905060005b828110156118c1576000806000868685818110611e1057611e10612985565b90506020020135815260200190815260200160002054905080838381518110611e3b57611e3b612985565b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060a081901c6affffffffffffffffffffff16838381518110611e9d57611e9d612985565b60209081029190910181015101525080611eb681612925565b915050611df1565b60075473ffffffffffffffffffffffffffffffffffffffff163314611f3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161095a565b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f726b590ef91a8c76ad05bbe91a57ef84605276528f49cd47d787f558a4e755b690602001611242565b73ffffffffffffffffffffffffffffffffffffffff8216611fff57600081815260208190526040902060a084901b73ffffffffffffffffffffffffffffffffffffffff861617905561208a565b6000818152602081815260408083207f800000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff89811660a08a901b1791909117909155600390925290912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169184169190911790555b808273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526001602081905260409091208054909101905583161561216e5773ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555b6000818152602081905260408082204360a01b73ffffffffffffffffffffffffffffffffffffffff80871691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526002602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6122728484846120eb565b73ffffffffffffffffffffffffffffffffffffffff83163b15610b025761229c3385858585612302565b610b02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732315f5452414e534645525f52454a45435445440000000000000000604482015260640161095a565b6000808473ffffffffffffffffffffffffffffffffffffffff1663150b7a02888887876040518563ffffffff1660e01b81526004016123449493929190612aa0565b602060405180830381600087803b15801561235e57600080fd5b505af1158015612372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123969190612ae9565b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461241457600080fd5b50565b60006020828403121561242957600080fd5b8135612434816123e6565b9392505050565b60005b8381101561245657818101518382015260200161243e565b83811115610b025750506000910152565b6000815180845261247f81602086016020860161243b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006124346020830184612467565b6000602082840312156124d657600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461241457600080fd5b6000806040838503121561251257600080fd5b823561251d816124dd565b946020939093013593505050565b60008060006060848603121561254057600080fd5b833561254b816124dd565b9250602084013561255b816124dd565b929592945050506040919091013590565b6000806000806080858703121561258257600080fd5b843561258d816124dd565b9350602085013592506040850135915060608501356125ab816124dd565b939692955090935050565b6000602082840312156125c857600080fd5b8135612434816124dd565b600080604083850312156125e657600080fd5b82356125f1816124dd565b91506020830135801515811461260657600080fd5b809150509250929050565b60008083601f84011261262357600080fd5b50813567ffffffffffffffff81111561263b57600080fd5b6020830191508360208260051b850101111561265657600080fd5b9250929050565b6000806020838503121561267057600080fd5b823567ffffffffffffffff81111561268757600080fd5b61269385828601612611565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612712577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612700858351612467565b945092850192908501906001016126c6565b5092979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156127955761279561271f565b604052919050565b600067ffffffffffffffff8211156127b7576127b761271f565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600080600080608085870312156127f957600080fd5b8435612804816124dd565b93506020850135612814816124dd565b925060408501359150606085013567ffffffffffffffff81111561283757600080fd5b8501601f8101871361284857600080fd5b803561285b6128568261279d565b61274e565b81815288602083850101111561287057600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b600080604083850312156128a557600080fd5b82356128b0816124dd565b91506020830135612606816124dd565b602080825282518282018190526000919060409081850190868401855b82811015612918578151805173ffffffffffffffffffffffffffffffffffffffff1685528601518685015292840192908501906001016128dd565b5091979650505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561297e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126129e957600080fd5b83018035915067ffffffffffffffff821115612a0457600080fd5b60200191503681900382131561265657600080fd5b8183823760009101908152919050565b600060208284031215612a3b57600080fd5b815167ffffffffffffffff811115612a5257600080fd5b8201601f81018413612a6357600080fd5b8051612a716128568261279d565b818152856020838501011115612a8657600080fd5b612a9782602083016020860161243b565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152612adf6080830184612467565b9695505050505050565b600060208284031215612afb57600080fd5b8151612434816123e656fea2646970667358221220a8273a9c52742ef15dc9ca22124ef87c7ffdf0ae09e070aab69b33efacb5d9df64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c806382fc314711610102578063ac9650d811610095578063e985e9c511610064578063e985e9c514610705578063f2fde38b1461075b578063f39452821461077b578063fca3b5aa146107a857600080fd5b8063ac9650d814610608578063b88d4fde14610628578063c87b56dd14610648578063db2afcdf1461066857600080fd5b806395d89b41116100d157806395d89b411461055557806399235f391461059b578063a22cb465146105bb578063a754d48f146105db57600080fd5b806382fc3147146104bb578063894e851f146104db5780638a0dac4a146105085780638da5cb5b1461052857600080fd5b8063452a93201161017a578063639147af11610149578063639147af1461042e578063698f87be1461044e57806370a082311461047b5780637ba9638b1461049b57600080fd5b8063452a93201461036d578063589a17431461039a5780635bffff1d146103e05780636352211e1461040e57600080fd5b8063095ea7b3116101b6578063095ea7b3146102de57806323b872dd1461030057806334dd800d1461032057806342842e0e1461034d57600080fd5b806301ffc9a7146101e857806306fdde031461021d578063075461721461026c578063081812fc146102be575b600080fd5b3480156101f457600080fd5b50610208610203366004612417565b6107c8565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b5060408051808201909152601e81527f4d656c6f426c656570732c204d656c6f64696573206f6620426c65657073000060208201525b60405161021491906124b1565b34801561027857600080fd5b506008546102999073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610214565b3480156102ca57600080fd5b506102996102d93660046124c4565b6108ad565b3480156102ea57600080fd5b506102fe6102f93660046124ff565b61099e565b005b34801561030c57600080fd5b506102fe61031b36600461252b565b610b08565b34801561032c57600080fd5b506005546102999073ffffffffffffffffffffffffffffffffffffffff1681565b34801561035957600080fd5b506102fe61036836600461252b565b610e4a565b34801561037957600080fd5b506009546102999073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103a657600080fd5b506102996103b53660046124c4565b6000908152600b602052604090206002015473ffffffffffffffffffffffffffffffffffffffff1690565b3480156103ec57600080fd5b506104006103fb36600461256c565b610e6a565b604051908152602001610214565b34801561041a57600080fd5b506102996104293660046124c4565b611080565b34801561043a57600080fd5b506102fe6104493660046125b6565b611111565b34801561045a57600080fd5b50600a546102999073ffffffffffffffffffffffffffffffffffffffff1681565b34801561048757600080fd5b506104006104963660046125b6565b61124d565b3480156104a757600080fd5b506102fe6104b63660046125b6565b6112f5565b3480156104c757600080fd5b506102fe6104d63660046125b6565b61142a565b3480156104e757600080fd5b506006546102999073ffffffffffffffffffffffffffffffffffffffff1681565b34801561051457600080fd5b506102fe6105233660046125b6565b61151e565b34801561053457600080fd5b506004546102999073ffffffffffffffffffffffffffffffffffffffff1681565b34801561056157600080fd5b5060408051808201909152600681527f4d424c4545500000000000000000000000000000000000000000000000000000602082015261025f565b3480156105a757600080fd5b506102fe6105b63660046125b6565b611612565b3480156105c757600080fd5b506102fe6105d63660046125d3565b611747565b3480156105e757600080fd5b506007546102999073ffffffffffffffffffffffffffffffffffffffff1681565b61061b61061636600461265d565b611756565b604051610214919061269f565b34801561063457600080fd5b506102fe6106433660046127e3565b6118c8565b34801561065457600080fd5b5061025f6106633660046124c4565b611c0d565b34801561067457600080fd5b506106cc6106833660046124c4565b600d602052600090815260409020546cffffffffffffffffffffffffff8116906d0100000000000000000000000000900472ffffffffffffffffffffffffffffffffffffff1682565b604080516cffffffffffffffffffffffffff909316835272ffffffffffffffffffffffffffffffffffffff909116602083015201610214565b34801561071157600080fd5b50610208610720366004612892565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260026020908152604080832093909416825291909152205460ff1690565b34801561076757600080fd5b506102fe6107763660046125b6565b611cf0565b34801561078757600080fd5b5061079b61079636600461265d565b611d8b565b60405161021491906128c0565b3480156107b457600080fd5b506102fe6107c33660046125b6565b611ebe565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061085b57507f80ac58cd000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b806108a757507f5b5e139f000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6000818152602081905260408120547f80000000000000000000000000000000000000000000000000000000000000008082161473ffffffffffffffffffffffffffffffffffffffff8216610963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064015b60405180910390fd5b80156109945750505060009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b5060009392505050565b6000818152602081905260409020546affffffffffffffffffffff60a082901c1673ffffffffffffffffffffffffffffffffffffffff8216610a3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161095a565b3373ffffffffffffffffffffffffffffffffffffffff83161480610a90575073ffffffffffffffffffffffffffffffffffffffff8216600090815260026020908152604080832033845290915290205460ff165b610af6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c0000000000000000000000604482015260640161095a565b610b0282828686611fb2565b50505050565b6000818152602081905260409020547f80000000000000000000000000000000000000000000000000000000000000008082161473ffffffffffffffffffffffffffffffffffffffff8216610bb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161095a565b8473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610c4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015260640161095a565b73ffffffffffffffffffffffffffffffffffffffff8416610ccb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161095a565b73ffffffffffffffffffffffffffffffffffffffff8416301415610d4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e4f545f544f5f54484953000000000000000000000000000000000000000000604482015260640161095a565b3373ffffffffffffffffffffffffffffffffffffffff861614610e385773ffffffffffffffffffffffffffffffffffffffff8516600090815260026020908152604080832033845290915290205460ff1680610dd25750808015610dd2575060008381526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1633145b610e38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015260640161095a565b610e438585856120eb565b5050505050565b610e65838383604051806020016040528060008152506118c8565b505050565b60085460009073ffffffffffffffffffffffffffffffffffffffff163314610eee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4f4e4c595f4d494e5445525f414c4c4f57454400000000000000000000000000604482015260640161095a565b600c60008154610efd90612925565b918290555060408051606081018252868152602080820187815273ffffffffffffffffffffffffffffffffffffffff8a81168486019081526000878152600b90945294909220925183555160018301559151600290910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169183169190911790559091508216610fec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161095a565b73ffffffffffffffffffffffffffffffffffffffff821630141561106c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e4f545f544f5f54484953000000000000000000000000000000000000000000604482015260640161095a565b611078600083836120eb565b949350505050565b60008181526020819052604090205473ffffffffffffffffffffffffffffffffffffffff811661110c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161095a565b919050565b60055473ffffffffffffffffffffffffffffffffffffffff1633148061116d575060095473ffffffffffffffffffffffffffffffffffffffff163314801561116d575073ffffffffffffffffffffffffffffffffffffffff8116155b6111d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161095a565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f89de65ceb8cdf195a0b50021ed65dd305b54d3b744a0e283bd98c6058e2edd78906020015b60405180910390a150565b600073ffffffffffffffffffffffffffffffffffffffff82166112cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5a45524f5f414444524553535f4f574e45520000000000000000000000000000604482015260640161095a565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b60065473ffffffffffffffffffffffffffffffffffffffff16331480611351575060095473ffffffffffffffffffffffffffffffffffffffff1633148015611351575073ffffffffffffffffffffffffffffffffffffffff8116155b6113b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161095a565b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fb17416b845258d996b82b66c3c9166088ec5edf592b35fcce47c62a73d61ef4190602001611242565b60055473ffffffffffffffffffffffffffffffffffffffff1633146114ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161095a565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f6bf5b09f847c9c9e97addeaf1ea9d5fd44ff6ae2c9c4aaf55fb476eca421a45d90602001611242565b60095473ffffffffffffffffffffffffffffffffffffffff16331461159f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161095a565b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fe6c09ffe4572dc9ceaa5ddde4ae41befa655d6fdfe8052077af0970f700e942e90602001611242565b60075473ffffffffffffffffffffffffffffffffffffffff1633148061166e575060095473ffffffffffffffffffffffffffffffffffffffff163314801561166e575073ffffffffffffffffffffffffffffffffffffffff8116155b6116d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161095a565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fb8e0165b6664b7af8f9563c66e3d6b987c2d06fe192539d7123a0777b41a7c8990602001611242565b6117523383836121cf565b5050565b60608167ffffffffffffffff8111156117715761177161271f565b6040519080825280602002602001820160405280156117a457816020015b606081526020019060019003908161178f5790505b50905060005b828110156118c157600080308686858181106117c8576117c8612985565b90506020028101906117da91906129b4565b6040516117e8929190612a19565b600060405180830381855af49150503d8060008114611823576040519150601f19603f3d011682016040523d82523d6000602084013e611828565b606091505b50915091508161188e5760448151101561184157600080fd5b6004810190508080602001905181019061185b9190612a29565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095a91906124b1565b808484815181106118a1576118a1612985565b6020026020010181905250505080806118b990612925565b9150506117aa565b5092915050565b6000828152602081905260409020547f80000000000000000000000000000000000000000000000000000000000000008082161473ffffffffffffffffffffffffffffffffffffffff8216611979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161095a565b8573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611a0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015260640161095a565b73ffffffffffffffffffffffffffffffffffffffff8516611a8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161095a565b73ffffffffffffffffffffffffffffffffffffffff8516301415611b0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e4f545f544f5f54484953000000000000000000000000000000000000000000604482015260640161095a565b3373ffffffffffffffffffffffffffffffffffffffff871614611bf957808015611b58575060008481526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1633145b80611b93575073ffffffffffffffffffffffffffffffffffffffff8616600090815260026020908152604080832033845290915290205460ff165b611bf9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015260640161095a565b611c0586868686612267565b505050505050565b6000818152600b6020526040908190208054600190910154600a5492517fd63fab2b000000000000000000000000000000000000000000000000000000008152600481018390526024810182905260609373ffffffffffffffffffffffffffffffffffffffff169063d63fab2b9060440160006040518083038186803b158015611c9657600080fd5b505afa158015611caa573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526110789190810190612a29565b60045473ffffffffffffffffffffffffffffffffffffffff16338114611d1557600080fd5b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84811691821790925560405190918316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60608167ffffffffffffffff811115611da657611da661271f565b604051908082528060200260200182016040528015611deb57816020015b6040805180820190915260008082526020820152815260200190600190039081611dc45790505b50905060005b828110156118c1576000806000868685818110611e1057611e10612985565b90506020020135815260200190815260200160002054905080838381518110611e3b57611e3b612985565b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060a081901c6affffffffffffffffffffff16838381518110611e9d57611e9d612985565b60209081029190910181015101525080611eb681612925565b915050611df1565b60075473ffffffffffffffffffffffffffffffffffffffff163314611f3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161095a565b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f726b590ef91a8c76ad05bbe91a57ef84605276528f49cd47d787f558a4e755b690602001611242565b73ffffffffffffffffffffffffffffffffffffffff8216611fff57600081815260208190526040902060a084901b73ffffffffffffffffffffffffffffffffffffffff861617905561208a565b6000818152602081815260408083207f800000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff89811660a08a901b1791909117909155600390925290912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169184169190911790555b808273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526001602081905260409091208054909101905583161561216e5773ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555b6000818152602081905260408082204360a01b73ffffffffffffffffffffffffffffffffffffffff80871691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526002602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6122728484846120eb565b73ffffffffffffffffffffffffffffffffffffffff83163b15610b025761229c3385858585612302565b610b02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732315f5452414e534645525f52454a45435445440000000000000000604482015260640161095a565b6000808473ffffffffffffffffffffffffffffffffffffffff1663150b7a02888887876040518563ffffffff1660e01b81526004016123449493929190612aa0565b602060405180830381600087803b15801561235e57600080fd5b505af1158015612372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123969190612ae9565b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461241457600080fd5b50565b60006020828403121561242957600080fd5b8135612434816123e6565b9392505050565b60005b8381101561245657818101518382015260200161243e565b83811115610b025750506000910152565b6000815180845261247f81602086016020860161243b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006124346020830184612467565b6000602082840312156124d657600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461241457600080fd5b6000806040838503121561251257600080fd5b823561251d816124dd565b946020939093013593505050565b60008060006060848603121561254057600080fd5b833561254b816124dd565b9250602084013561255b816124dd565b929592945050506040919091013590565b6000806000806080858703121561258257600080fd5b843561258d816124dd565b9350602085013592506040850135915060608501356125ab816124dd565b939692955090935050565b6000602082840312156125c857600080fd5b8135612434816124dd565b600080604083850312156125e657600080fd5b82356125f1816124dd565b91506020830135801515811461260657600080fd5b809150509250929050565b60008083601f84011261262357600080fd5b50813567ffffffffffffffff81111561263b57600080fd5b6020830191508360208260051b850101111561265657600080fd5b9250929050565b6000806020838503121561267057600080fd5b823567ffffffffffffffff81111561268757600080fd5b61269385828601612611565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612712577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612700858351612467565b945092850192908501906001016126c6565b5092979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156127955761279561271f565b604052919050565b600067ffffffffffffffff8211156127b7576127b761271f565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600080600080608085870312156127f957600080fd5b8435612804816124dd565b93506020850135612814816124dd565b925060408501359150606085013567ffffffffffffffff81111561283757600080fd5b8501601f8101871361284857600080fd5b803561285b6128568261279d565b61274e565b81815288602083850101111561287057600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b600080604083850312156128a557600080fd5b82356128b0816124dd565b91506020830135612606816124dd565b602080825282518282018190526000919060409081850190868401855b82811015612918578151805173ffffffffffffffffffffffffffffffffffffffff1685528601518685015292840192908501906001016128dd565b5091979650505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561297e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126129e957600080fd5b83018035915067ffffffffffffffff821115612a0457600080fd5b60200191503681900382131561265657600080fd5b8183823760009101908152919050565b600060208284031215612a3b57600080fd5b815167ffffffffffffffff811115612a5257600080fd5b8201601f81018413612a6357600080fd5b8051612a716128568261279d565b818152856020838501011115612a8657600080fd5b612a9782602083016020860161243b565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152612adf6080830184612467565b9695505050505050565b600060208284031215612afb57600080fd5b8151612434816123e656fea2646970667358221220a8273a9c52742ef15dc9ca22124ef87c7ffdf0ae09e070aab69b33efacb5d9df64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "balance": "The number of tokens owned by the address."
        }
      },
      "constructor": {
        "params": {
          "initialGuardian": "guardian able to immortalize rules",
          "initialMinterAdmin": "admin able to set the minter contract.",
          "initialOwner": "address that can execute on behalf of Bleeps (example: can claim ENS name).",
          "initialRoyaltyAdmin": "admin able to update the royalty recipient and rates.",
          "initialTokenURIAdmin": "admin able to update the tokenURI contract.",
          "initialTokenURIContract": "initial tokenURI contract that generate the metadata including the wav file."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "_0": "The address of the operator."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "isOperator": "The status of the approval."
        }
      },
      "multicall(bytes[])": {
        "details": "The `msg.value` should not be trusted for any method callable from multicall.",
        "params": {
          "data": "The encoded function data for each of the calls to make to this contract."
        },
        "returns": {
          "results": "The results from each of the calls passed in via data."
        }
      },
      "ownerAndLastTransferBlockNumberList(uint256[])": {
        "params": {
          "ids": "The list of token ids to check."
        },
        "returns": {
          "ownersData": "The list of (owner, lastTransferBlockNumber) for each ids given as input."
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "The id of the interface."
        },
        "returns": {
          "_0": "Whether the interface is supported."
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to spend tokens on the senders behalf."
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "guardian()": {
        "notice": "guardian has some special vetoing power to guide the direction of the DAO. It can only remove rights from the DAO. It could be used to immortalize rules."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator."
      },
      "minter()": {
        "notice": "address allowed to mint, allow the sale contract to be separated from the token contract that can focus on the core logic"
      },
      "minterAdmin()": {
        "notice": "minterAdmin can update the minter. could be given to the DAO later so new mechanism of sales for Melobleeps can be tested."
      },
      "multicall(bytes[])": {
        "notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed."
      },
      "name()": {
        "notice": "A descriptive name for a collection of NFTs in this contract"
      },
      "owner()": {
        "notice": "the address of the current owner, that is able to execute on behalf of this contract."
      },
      "ownerAndLastTransferBlockNumberList(uint256[])": {
        "notice": "Get the list of owner of a token and the blockNumber of its last transfer, useful to voting mechanism."
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "royaltyAdmin()": {
        "notice": "address allowed to set royalty parameters"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver know of the transfer."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "setGuardian(address)": {
        "notice": "set the new guardian that can freeze the other admins (except owner). Can only be called by the current guardian."
      },
      "setMinter(address)": {
        "notice": "set the new minter that can mint Bleeps (up to 1024). Can only be called by the minter admin."
      },
      "setMinterAdmin(address)": {
        "notice": "set the new minterAdmin that can set the minter for Bleeps Can only be called by the current minter admin."
      },
      "setRoyaltyAdmin(address)": {
        "notice": "set the new royaltyAdmin that can change the royalties Can only be called by the current royalty admin."
      },
      "setTokenURIAdmin(address)": {
        "notice": "set the new tokenURIAdmin that can change the tokenURI Can only be called by the current tokenURI admin."
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface."
      },
      "symbol()": {
        "notice": "An abbreviated name for NFTs in this contract"
      },
      "tokenURIAdmin()": {
        "notice": "maintainer can update the tokenURI contract, this is intended to be relinquished once the tokenURI has been heavily tested in the wild and that no modification are needed."
      },
      "tokenURIContract()": {
        "notice": "the contract that actually generate the sound (and all metadata via the a data: uri as tokenURI)"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses."
      },
      "transferOwnership(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6602,
        "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
        "label": "_owners",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6606,
        "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6612,
        "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6616,
        "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
        "label": "_operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 13724,
        "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
        "label": "owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 13727,
        "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
        "label": "tokenURIAdmin",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 13730,
        "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
        "label": "royaltyAdmin",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 13733,
        "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
        "label": "minterAdmin",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 13736,
        "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
        "label": "minter",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 13739,
        "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
        "label": "guardian",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 13097,
        "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
        "label": "tokenURIContract",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(MeloBleepsTokenURI)14269"
      },
      {
        "astId": 13109,
        "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
        "label": "_melodies",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Melody)13104_storage)"
      },
      {
        "astId": 13112,
        "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
        "label": "_supply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 13122,
        "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
        "label": "bleepsUsed",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(BleepUsed)13117_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(MeloBleepsTokenURI)14269": {
        "encoding": "inplace",
        "label": "contract MeloBleepsTokenURI",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(BleepUsed)13117_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MeloBleeps.BleepUsed)",
        "numberOfBytes": "32",
        "value": "t_struct(BleepUsed)13117_storage"
      },
      "t_mapping(t_uint256,t_struct(Melody)13104_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MeloBleeps.Melody)",
        "numberOfBytes": "32",
        "value": "t_struct(Melody)13104_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BleepUsed)13117_storage": {
        "encoding": "inplace",
        "label": "struct MeloBleeps.BleepUsed",
        "members": [
          {
            "astId": 13114,
            "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
            "label": "num",
            "offset": 0,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 13116,
            "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
            "label": "value",
            "offset": 13,
            "slot": "0",
            "type": "t_uint152"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Melody)13104_storage": {
        "encoding": "inplace",
        "label": "struct MeloBleeps.Melody",
        "members": [
          {
            "astId": 13099,
            "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
            "label": "data1",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 13101,
            "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
            "label": "data2",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 13103,
            "contract": "src/melobleeps/MeloBleeps.sol:MeloBleeps",
            "label": "artist",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint152": {
        "encoding": "inplace",
        "label": "uint152",
        "numberOfBytes": "19"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}