{
  "address": "0x0A77c7544b7e1f81f522f833b984E3e951294226",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "wav",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d61d95e028d157df37ca302d90f97763fe417a6426f8154c73b808464df2dae",
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0x0A77c7544b7e1f81f522f833b984E3e951294226",
    "transactionIndex": 29,
    "gasUsed": "1175063",
    "logsBloom": "0x
    "blockHash": "0x973d4e52d242012c5dc2fa7bcaaadfee1c58367d819d28f92ae75bba1d2c1cca",
    "transactionHash": "0x0d61d95e028d157df37ca302d90f97763fe417a6426f8154c73b808464df2dae",
    "logs": [],
    "blockNumber": 5725631,
    "cumulativeGasUsed": "6203867",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "596d2ac5c800e142c3a4be152947f99a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"wav\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/BleepsTokenURI.sol\":\"BleepsTokenURI\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"src/BleepsTokenURI.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/* solhint-disable quotes */\\n\\ncontract BleepsTokenURI {\\n    string internal constant TABLE_ENCODE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    bytes internal constant FREQUENCIES =\\n        hex\\\"00198d001b12001cae001e6200203100221b00242200264800288f002af8002d8600303b00331900362300395b003cc4004061004435004844004c9000511d0055f0005b0c006076006633006c460072b60079890080c300886b00908700992000a23a00abe000b61800c0ec00cc6500d88d00e56d00f3110101850110d601210f01323f0144750157c0016c310181d90198ca01b11901cada01e62302030b0221ab02421e02647e0288ea02af8002d8620303b10331940362320395b403cc4604061604435704843c04c8fc0511d4055f0005b0c306076306632906c464072b6707988b080c2c0886ad0908770991f90a23a80abe000b61860c0ec5\\\";\\n\\n    string internal constant noteNames = \\\"C C#D D#E F F#G G#A A#B \\\";\\n    // string internal constant instrumentNames = \\\"TRIANGLE TILTED SAW  SAW SQUARE PULSE ORGAN NOISE PHASER\\\";\\n\\n    // settings for sound quality\\n    uint256 internal constant SAMPLE_RATE = 11000;\\n    uint256 internal constant BYTES_PER_SAMPLE = 1;\\n\\n    // constants for ensuring enough precision when computing values\\n    int256 internal constant ONE = 1000000;\\n    int256 internal constant TWO = 2000000; // 2 * ONE;\\n    int256 internal constant HALF = 500000; // ONE/ 2;\\n    int256 internal constant ZERO7 = 700000; // (ONE * 7) / 10;\\n    int256 internal constant ZERO3 = 300000; // (ONE * 3) / 10;\\n    int256 internal constant ZERO1 = 100000; //(ONE * 1) / 10;\\n    int256 internal constant ZERO3125 = 312500; //( ONE * 3125) / 10000;\\n    int256 internal constant ZERO8750 = 875000; // (ONE * 8750) / 10000;\\n    int256 internal constant ONE75 = 1750000;\\n    int256 internal constant MINUS_ONE = -1000000; //; -ONE;\\n    int256 internal constant MIN_VALUE = MINUS_ONE + 1;\\n    int256 internal constant MAX_VALUE = ONE - 1;\\n\\n    // allow to switch sign in assembly via mul(MINUS, x)\\n    int256 internal constant MINUS = -1;\\n\\n    function wav(uint256 id) external view returns (string memory) {\\n        return _generateWav(id);\\n    }\\n\\n    function uint2str(uint256 num) private pure returns (string memory _uintAsString) {\\n        unchecked {\\n            if (num == 0) {\\n                return \\\"0\\\";\\n            }\\n\\n            uint256 j = num;\\n            uint256 len;\\n            while (j != 0) {\\n                len++;\\n                j /= 10;\\n            }\\n\\n            bytes memory bstr = new bytes(len);\\n            uint256 k = len - 1;\\n            while (num != 0) {\\n                bstr[k--] = bytes1(uint8(48 + (num % 10)));\\n                num /= 10;\\n            }\\n\\n            return string(bstr);\\n        }\\n    }\\n\\n    function noteString(uint256 id) internal pure returns (bytes memory str) {\\n        uint256 note = uint256(id) % 64;\\n        uint256 instr = (uint256(id) >> 6) % 64;\\n\\n        if (instr == 0) {\\n            str = \\\"TRIANGLE%20__\\\";\\n        } else if (instr == 1) {\\n            str = \\\"TILTED%20SAW%20__\\\";\\n        } else if (instr == 2) {\\n            str = \\\"SAW%20__\\\";\\n        } else if (instr == 3) {\\n            str = \\\"SQUARE%20__\\\";\\n        } else if (instr == 4) {\\n            str = \\\"PULSE%20__\\\";\\n        } else if (instr == 5) {\\n            str = \\\"ORGAN%20__\\\";\\n        } else if (instr == 6) {\\n            str = \\\"NOISE%20__\\\";\\n        } else if (instr == 7) {\\n            str = \\\"PHASER%20__\\\";\\n        }\\n\\n        uint8 m = uint8(note % 12);\\n        uint8 n = m;\\n        if (m > 0) {\\n            n--;\\n        }\\n        if (m > 2) {\\n            n--;\\n        }\\n        if (m > 5) {\\n            n--;\\n        }\\n        if (m > 7) {\\n            n--;\\n        }\\n        if (m > 9) {\\n            n--;\\n        }\\n        str[str.length - 2] = bytes1(uint8(65) + uint8((n + 2) % 7));\\n        if (m == 1 || m == 3 || m == 6 || m == 8 || m == 10) {\\n            str[str.length - 1] = \\\"%\\\";\\n            str = bytes.concat(str, \\\"23_\\\");\\n        }\\n        str[str.length - 1] = bytes1(48 + uint8(note / 12));\\n    }\\n\\n    function _prepareBuffer(uint256 id, bytes memory buffer) internal pure returns (uint256 l) {\\n        unchecked {\\n            bytes memory note = noteString(id);\\n            bytes memory start = bytes.concat(\\n                'data:application/json,{\\\"name\\\":\\\"',\\n                note,\\n                '\\\",\\\"description\\\":\\\"A%20sound%20fully%20generated%20onchain\\\",\\\"external_url\\\":\\\"',\\n                \\\"https://bleeps.eth.link\\\",\\n                \\\"\\\\\\\",\\\\\\\"image\\\\\\\":\\\\\\\"data:image/svg+xml,<svg%2520viewBox='0%25200%252032%252016'%2520><text%2520x='16'%2520y='8'%2520dominant-baseline='middle'%2520text-anchor='middle'%2520style='fill:%2520rgb(219,%252039,%2520119);%2520font-size:%252012px;'>\\\",\\n                note,\\n                '</text></svg>\\\",\\\"animation_url\\\":\\\"data:audio/wav;base64,UklGRgAAAABXQVZFZm10IBAAAAABAAEA+CoAAPBVAAABAAgAZGF0YQAA'\\n            ); // missing 2 zero bytes\\n            uint256 len = start.length;\\n            uint256 src;\\n            uint256 dest;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                src := add(start, 0x20)\\n                dest := add(buffer, 0x20)\\n            }\\n\\n            for (; len >= 32; len -= 32) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    mstore(dest, mload(src))\\n                }\\n                dest += 32;\\n                src += 32;\\n            }\\n\\n            // TODO remove that step by ensuring the length is a multiple of 32 bytes\\n            uint256 mask = 256**(32 - len) - 1;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n            return start.length;\\n        }\\n    }\\n\\n    function _finishBuffer(\\n        bytes memory buffer,\\n        uint256 resultPtr,\\n        uint256 tablePtr,\\n        uint256 numSamplesPlusOne,\\n        uint256 startLength\\n    ) internal pure {\\n        // write ends + size in buffer\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore8(resultPtr, 0x22) // \\\"\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, 0x7D) // }\\n            resultPtr := add(resultPtr, 1)\\n            mstore(buffer, sub(sub(resultPtr, buffer), 32))\\n        }\\n\\n        // compute chnksize (TODO hardcode)\\n        uint256 filesizeMinus8 = ((numSamplesPlusOne - 1) * 2 + 44) - 8;\\n        uint256 chunkSize = filesizeMinus8 + 8 - 44;\\n\\n        // filesize // 46 00 00\\n        resultPtr = startLength + 32 - 52;\\n        assembly {\\n            resultPtr := add(buffer, resultPtr)\\n            let v := shl(40, 0x46)\\n            v := add(v, shl(32, and(filesizeMinus8, 255)))\\n            v := add(v, shl(24, and(shr(8, filesizeMinus8), 255)))\\n            v := add(v, shl(16, and(shr(16, filesizeMinus8), 255)))\\n            v := add(v, shl(8, and(shr(24, filesizeMinus8), 255)))\\n            v := add(v, 0x57)\\n            // write 8 characters\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(42, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(36, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(30, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(24, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(18, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(12, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(6, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(v, 0x3F))))\\n        }\\n\\n        // // // chunksize // 61 00 00\\n        resultPtr = startLength + 32 - 4;\\n        assembly {\\n            resultPtr := add(buffer, resultPtr)\\n            let v := shl(40, 0x61)\\n            v := add(v, shl(32, and(chunkSize, 255)))\\n            v := add(v, shl(24, and(shr(8, chunkSize), 255)))\\n            v := add(v, shl(16, and(shr(16, chunkSize), 255)))\\n            v := add(v, shl(8, and(shr(24, chunkSize), 255)))\\n            v := add(v, 0x57)\\n            // write 8 characters\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(42, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(36, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(30, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(24, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(18, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(12, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(6, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(v, 0x3F))))\\n        }\\n    }\\n\\n    function _generateWav(uint256 id) internal view returns (string memory) {\\n        bytes memory buffer = new bytes(100000);\\n        uint256 startLength = _prepareBuffer(id, buffer);\\n\\n        uint256 note = uint256(id) % 64;\\n        uint256 instr = (uint256(id) >> 6) % 64;\\n\\n        uint256 vol = 500;\\n\\n        string memory table = TABLE_ENCODE;\\n        uint256 tablePtr;\\n        uint256 resultPtr = startLength + 32;\\n\\n        assembly {\\n            // prepare the lookup table\\n            tablePtr := add(table, 1)\\n\\n            // set write pointer\\n            resultPtr := add(buffer, resultPtr)\\n        }\\n\\n        bytes memory freqTable = FREQUENCIES;\\n\\n        // uint256 numSamplesPlusOne = 1461; //(3 * ((((61 * 16 * SAMPLE_RATE)) / (7350)) + 1)) / 3; //3 * 3 * ((22050 + 3) / 3); // 8 = speed\\n        // console.log(\\\"numSamplesPlusOne %i\\\", numSamplesPlusOne);\\n\\n        int256 pos = 0;\\n\\n        uint256[] memory noise_handler = new uint256[](4);\\n\\n        vol = 0;\\n        for (uint256 i = 0; i < 8766 + 3000; i += 3) {\\n            if (i > 8766) {\\n                if (i % 2 == 0 && (vol > 0)) {\\n                    vol -= 1;\\n                }\\n            } else if (i % 3 == 0) {\\n                if (vol < 500) {\\n                    vol += 1;\\n                }\\n            }\\n\\n            assembly {\\n                function abs(a) -> b {\\n                    b := a\\n                    if slt(b, 0) {\\n                        b := sub(0, b)\\n                    }\\n                }\\n\\n                let posStep := div(\\n                    mul(and(shr(232, mload(add(freqTable, add(32, mul(note, 3))))), 0xFFFFFF), 10000),\\n                    SAMPLE_RATE\\n                )\\n\\n                let v := 0\\n                for {\\n                    let c := 0\\n                } lt(c, 3) {\\n                    c := add(c, 1)\\n                } {\\n                    let intValue := 0\\n                    // skip first value as it pertain to the double bytes for chunksize\\n                    if gt(pos, 0) {\\n                        // tri\\n                        // return (Math.abs((x % 1) * 2 - 1) * 2 - 1) * 0.5 // 0.7 in picolove\\n                        // return floor(((Math.abs((x % ONE) * 2 - ONE) * 2 - ONE) * HALF) / ONE);\\n                        if eq(instr, 0) {\\n                            // intValue := sub(mul(smod(pos, ONE), 2), ONE)\\n                            // if slt(intValue, 0) {\\n                            //     intValue := sub(0, intValue)\\n                            // }\\n                            // intValue := sub(mul(intValue, 2), ONE)\\n                            // intValue := sdiv(mul(intValue, HALF), ONE)\\n\\n                            intValue := abs(sub(mul(mod(pos, ONE), 2), ONE))\\n                            intValue := sub(mul(intValue, 2), ONE)\\n                            intValue := sdiv(intValue, 2)\\n                        }\\n                        if eq(instr, 1) {\\n                            // uneven_tri\\n                            let tmp := smod(pos, ONE)\\n                            if slt(tmp, ZERO8750) {\\n                                intValue := sdiv(mul(tmp, 16), 7)\\n                            }\\n                            if sgt(tmp, ZERO8750) {\\n                                intValue := mul(sub(ONE, tmp), 16)\\n                            }\\n                            if eq(tmp, ZERO8750) {\\n                                intValue := mul(sub(ONE, tmp), 16)\\n                            }\\n                            intValue := sdiv(mul(sub(intValue, ONE), HALF), ONE)\\n                        }\\n                        if eq(instr, 2) {\\n                            // saw\\n                            intValue := sdiv(mul(sub(smod(pos, ONE), HALF), ZERO7), ONE)\\n                        }\\n                        if eq(instr, 3) {\\n                            // square\\n                            let tmp := smod(pos, ONE)\\n                            intValue := MINUS_ONE\\n                            if lt(tmp, HALF) {\\n                                intValue := ONE\\n                            }\\n                            intValue := sdiv(intValue, 4)\\n                        }\\n                        if eq(instr, 4) {\\n                            // pulse\\n                            let tmp := smod(pos, ONE)\\n                            intValue := MINUS_ONE\\n                            if lt(tmp, ZERO3125) {\\n                                intValue := ONE\\n                            }\\n                        }\\n                        if eq(instr, 5) {\\n                            // tri2\\n                            intValue := mul(pos, 4)\\n                            intValue := sdiv(\\n                                mul(\\n                                    sub(\\n                                        sub(\\n                                            add(\\n                                                abs(sub(smod(intValue, TWO), ONE)),\\n                                                sdiv(\\n                                                    sub(abs(sub(smod(sdiv(mul(intValue, HALF), ONE), TWO), ONE)), HALF),\\n                                                    2\\n                                                )\\n                                            ),\\n                                            HALF\\n                                        ),\\n                                        ZERO1\\n                                    ),\\n                                    HALF\\n                                ),\\n                                ONE\\n                            )\\n                        }\\n                        if eq(instr, 6) {\\n                            // intValue := sub(shr(232, mload(add(32, add(noiseTable, mod(pos, 8976))))), ONE)\\n                            // export function noise(sampleRate: number): (x: number) => number {\\n                            //     let rand = 0;\\n                            //     let lastx = 0;\\n                            //     let sample = 0;\\n                            //     let lsample = 0;\\n                            //     const tscale = note_to_hz(63) / sampleRate;\\n                            //     return function (x: number) {\\n                            //         rand = (1103515245 * rand + 12345) % Math.pow(2, 31);\\n                            //         const scale = (x - lastx) / tscale;\\n                            //         lsample = sample;\\n                            //         sample = ((lsample + scale) * ((rand / Math.pow(2, 31)) * TWO - ONE)) / (ONE + scale);\\n                            //         lastx = x;\\n                            // return Math.min(Math.max((((lsample + sample) * 4) / 3) * (ONE * 1.75 - scale), -ONE), ONE) * 0.6;\\n                            //     };\\n                            // }\\n\\n                            // let rand = 0;\\n                            // let lastx = 0;\\n                            // let sample = 0;\\n                            // let lsample = 0;\\n                            // const tscale = note_to_hz(63) / sampleRate;\\n                            // return function (x: number) {\\n                            //     rand = (1103515245 * rand + 12345) % Math.pow(2, 31);\\n                            //     const scale = floor(((x - lastx) * ONE) / tscale);\\n                            //     lsample = sample;\\n                            //  sample = floor(((lsample + scale) * (floor((rand * TWO) / Math.pow(2, 31)) - ONE)) / (ONE + scale));\\n                            //     lastx = x;\\n                            //     return floor(\\n                            //     (Math.min(Math.max(floor((floor(((lsample + sample) * 4) / 3) * (1.75 - scale)) / ONE), -ONE), ONE) * 7) / 10\\n                            //     );\\n                            // };\\n\\n                            let rand := mload(add(noise_handler, 32))\\n                            let lastx := mload(add(noise_handler, 64))\\n                            let sample := mload(add(noise_handler, 96))\\n                            let lsample := mload(add(noise_handler, 128))\\n\\n                            rand := mod(add(mul(1103515245, rand), 12345), 0x80000000)\\n                            let scale := div(mul(sub(pos, lastx), ONE), 160000) // 2489  = note_to_hz(63)  => 2489 * 10000000 / 11000 (sample rate) => 2262727 (160000 is from js)\\n                            lsample := sample\\n                            sample := sdiv(\\n                                mul(add(lsample, scale), sub(div(mul(rand, TWO), 0x8000000), ONE)),\\n                                add(ONE, scale)\\n                            )\\n                            lastx := pos\\n                            intValue := sdiv(mul(sdiv(mul(add(lsample, sample), 4), 3), sub(2, scale)), ONE) // 2 => 1.75\\n                            if slt(intValue, MINUS_ONE) {\\n                                intValue := MINUS_ONE\\n                            }\\n                            if sgt(intValue, ONE) {\\n                                intValue := ONE\\n                            }\\n                            intValue := sdiv(mul(intValue, 5), 10)\\n                            // noise_handler := or(rand, or(shl(64, lastx), add(shl(128, sample), shl(196, lsample))))\\n                            mstore(add(noise_handler, 32), rand)\\n                            mstore(add(noise_handler, 64), lastx)\\n                            mstore(add(noise_handler, 96), sample)\\n                            mstore(add(noise_handler, 128), lsample)\\n\\n                            // let rand := mod(noise_handler, 0xFFFFFFFFFFFFFFFF)\\n                            // let lastx := mod(shr(64, noise_handler), 0xFFFFFFFFFFFFFFFF)\\n                            // let sample := mod(shr(128, noise_handler), 0xFFFFFFFFFFFFFFFF)\\n                            // let lsample := mod(shr(196, noise_handler), 0xFFFFFFFFFFFFFFFF)\\n                            // rand := mod(add(mul(1103515245, rand), 12345), 0x80000000)\\n                            // let scale := div(sub(pos, lastx), 2262727) // 2489  = note_to_hz(63)  => 2489 * 10000000 / 11000 (sample rate) => 2262727\\n                            // lsample := sample\\n                            // sample := div(\\n                            //     mul(add(lsample, scale), sub(mul(div(rand, 0x8000000), TWO), ONE)),\\n                            //     add(ONE, scale)\\n                            // )\\n                            // lastx := pos\\n                            // intValue := mul(div(mul(add(lsample, sample), 4), 3), sub(ONE75, scale))\\n                            // if slt(intValue, MINUS_ONE) {\\n                            //     intValue := MINUS_ONE\\n                            // }\\n                            // if gt(intValue, ONE) {\\n                            //     intValue := ONE\\n                            // }\\n                            // intValue := div(mul(intValue, 6), 10)\\n                            // noise_handler := add(rand, add(shl(64, lastx), add(shl(128, sample), shl(196, lsample))))\\n                        }\\n\\n                        // x = x * 2;\\n                        // return floor(\\n                        //     Math.abs((x % TWO) - ONE) - HALF + floor((Math.abs((floor((x * 127) / 128) % TWO) - ONE) - HALF) / 2) - ONE / 4\\n                        // );\\n                        if eq(instr, 7) {\\n                            // detuned_tri\\n                            intValue := mul(pos, 2)\\n                            intValue := add(\\n                                sub(abs(sub(smod(intValue, TWO), ONE)), HALF),\\n                                sub(\\n                                    sdiv(sub(abs(sub(smod(sdiv(mul(intValue, 127), 128), TWO), ONE)), HALF), 2),\\n                                    sdiv(ONE, 4)\\n                                )\\n                            )\\n                        }\\n                        intValue := sdiv(mul(intValue, vol), 700) // getValue(pos, instr)\\n                        intValue := add(sdiv(mul(intValue, 256), TWO), 128) // TODO never go negative\\n                    }\\n                    v := add(v, shl(sub(16, mul(c, 8)), intValue))\\n                    pos := add(pos, posStep)\\n                }\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, v), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, v), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, v), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(v, 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n        }\\n\\n        _finishBuffer(buffer, resultPtr, tablePtr, 8766 + 3000, startLength);\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x1ac2f232116022174ae9564ae45ba71bc457b7422d2c9325765c65da308ba41e\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611461806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c4df382614610030575b600080fd5b61004361003e366004610d98565b610059565b6040516100509190610de1565b60405180910390f35b60606100648261006a565b92915050565b60408051620186a0808252620186c082019092526060916000919060208201818036833701905050905060006100a084836105f7565b905060006100af604086610e61565b905060006100c26040600688901c610e61565b604080516060810182528181529192506101f4916000916113ec602083013990506000806100f1876020610ea4565b90506001830191508088019050600060405180610120016040528060fc81526020016112f060fc913960408051600480825260a082019092529192506000918291602082016080803683370190505090506000965060005b612df68110156105d65761223e81111561018d57610168600282610e61565b1580156101755750600088115b1561018857610185600189610ebc565b97505b6101c4565b610198600382610e61565b610188576101f488101561018857610185600189610ea4565b8060008112156101bf576000035b919050565b612af861271062ffffff60038d0260200187015160e81c1602046000805b600381101561057b5760008615610562578c6102395761020e620f42406002620f42408a0602036101b1565b60029081027ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0010590505b60018d14156102bb57620f42408707620d59f881121561025d576007601082020591505b620d59f881131561027457601081620f4240030291505b620d59f881141561028b57601081620f4240030291505b50620f42407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc09091016207a12002055b60028d14156102f55750620f42407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85ee081880701620aae6002055b60038d141561033e57507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0620f424087076207a12081101561033857620f424091505b50600490055b60048d141561038357507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0620f424087076204c4b481101561038157620f424091505b505b60058d14156103e257600487029050620f42406207a120620186a06207a12060026207a1206103c5620f4240621e8480620f42406207a1208b020507036101b1565b03056103da620f4240621e84808807036101b1565b010303020590505b60068d14156104db5760208601516040870151606088015160808901516380000000613039856341c64e6d020106935062027100620f4240848d03020482915080620f424001620f42406308000000621e848088020403828401020592508b9350620f42408160020360036004868601020502059550507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc08512156104a5577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc094505b620f42408513156104b757620f424094505b60208a0193909352604089019190915260608801526080870152600a600591909102055b60078d141561054957506002868102906203d090906207a12061052a7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0621e8480608060fe8e020507016101b1565b0305036207a120610544620f4240621e84808507036101b1565b030190505b6102bc8c82020590506080621e84806101008302050190505b95830195600882026010031b91909101906001016101e2565b50603f8160121c168801518753600187019650603f81600c1c168801518753600187019650603f8160061c168801518753600187019650603f811688015187535050600194909401936105cf600382610ea4565b9050610149565b506105e68b8587612df68e6106d9565b50989b9a5050505050505050505050565b60008061060384610904565b90506000818260405160200161061a929190610eef565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805190915060208083019086015b6020831061069357815181527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610656565b905181516020939093036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909116921691909117905251949350505050565b60228453600184019350607d84536001840193506020858503038552600060086001846107069190610ebc565b6107119060026111ac565b61071c90602c610ea4565b6107269190610ebc565b90506000602c610737836008610ea4565b6107419190610ebc565b90506034610750846020610ea4565b61075a9190610ebc565b603f602084901b64ff0000000016601085811b63ff000000169190910162ff00008616019085901c61ff0016016546000000005701602a81901c919091168701519189019750908753600187019650603f8160241c168601518753600187019650603f81601e1c168601518753600187019650603f8160181c168601518753600187019650603f8160121c168601518753600187019650603f81600c1c168601518753600187019650603f8160061c168601518753600187019650603f8116860151875350600461082c846020610ea4565b6108369190610ebc565b603f602083901b64ff0000000016601084811b63ff000000169190910162ff00008516019084901c61ff0016016561000000005701602a81901c919091168701519189019750908753600187019650603f8160241c168601518753600187019650603f81601e1c168601518753600187019650603f8160181c168601518753600187019650603f8160121c168601518753600187019650603f81600c1c168601518753600187019650603f8160061c168601518753600187019650603f811686015187535050505050505050565b60606000610913604084610e61565b905060006109266040600686901c610e61565b90508061096a576040518060400160405280600d81526020017f545249414e474c452532305f5f000000000000000000000000000000000000008152509250610b50565b80600114156109b0576040518060400160405280601181526020017f54494c5445442532305341572532305f5f0000000000000000000000000000008152509250610b50565b80600214156109f6576040518060400160405280600881526020017f5341572532305f5f0000000000000000000000000000000000000000000000008152509250610b50565b8060031415610a3c576040518060400160405280600b81526020017f5351554152452532305f5f0000000000000000000000000000000000000000008152509250610b50565b8060041415610a82576040518060400160405280600a81526020017f50554c53452532305f5f000000000000000000000000000000000000000000008152509250610b50565b8060051415610ac8576040518060400160405280600a81526020017f4f5247414e2532305f5f000000000000000000000000000000000000000000008152509250610b50565b8060061415610b0e576040518060400160405280600a81526020017f4e4f4953452532305f5f000000000000000000000000000000000000000000008152509250610b50565b8060071415610b50576040518060400160405280600b81526020017f5048415345522532305f5f00000000000000000000000000000000000000000081525092505b6000610b5d600c84610e61565b90508060ff811615610b775780610b73816111e9565b9150505b60028260ff161115610b915780610b8d816111e9565b9150505b60058260ff161115610bab5780610ba7816111e9565b9150505b60078260ff161115610bc55780610bc1816111e9565b9150505b60098260ff161115610bdf5780610bdb816111e9565b9150505b6007610bec826002611224565b610bf69190611249565b610c01906041611224565b60f81b8560028751610c139190610ebc565b81518110610c2357610c2361126b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160ff1660011480610c6757508160ff166003145b80610c7557508160ff166006145b80610c8357508160ff166008145b80610c9157508160ff16600a145b15610d28577f25000000000000000000000000000000000000000000000000000000000000008560018751610cc69190610ebc565b81518110610cd657610cd661126b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535084604051602001610d16919061129a565b60405160208183030381529060405294505b610d33600c856112db565b610d3e906030611224565b60f81b8560018751610d509190610ebc565b81518110610d6057610d6061126b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050505050919050565b600060208284031215610daa57600080fd5b5035919050565b60005b83811015610dcc578181015183820152602001610db4565b83811115610ddb576000848401525b50505050565b6020815260008251806020840152610e00816040850160208701610db1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610e7057610e70610e32565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610eb757610eb7610e75565b500190565b600082821015610ece57610ece610e75565b500390565b60008151610ee5818560208601610db1565b9290920192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e2c7b226e616d65223a2200815260008351610f2781601f850160208801610db1565b7f222c226465736372697074696f6e223a2241253230736f756e6425323066756c601f918401918201527f6c7925323067656e6572617465642532306f6e636861696e222c226578746572603f8201527f6e616c5f75726c223a2200000000000000000000000000000000000000000000605f8201527f68747470733a2f2f626c656570732e6574682e6c696e6b00000000000000000060698201527f222c22696d616765223a22646174613a696d6167652f7376672b786d6c2c3c7360808201527f7667253235323076696577426f783d273025323532303025323532303332253260a08201527f35323031362725323532303e3c746578742532353230783d273136272532353260c08201527f30793d2738272532353230646f6d696e616e742d626173656c696e653d276d6960e08201527f64646c65272532353230746578742d616e63686f723d276d6964646c652725326101008201527f3532307374796c653d2766696c6c3a2532353230726762283231392c253235326101208201527f3033392c2532353230313139293b2532353230666f6e742d73697a653a2532356101408201527f3230313270783b273e00000000000000000000000000000000000000000000006101608201526111a3611108610169830186610ed3565b7f3c2f746578743e3c2f7376673e222c22616e696d6174696f6e5f75726c223a2281527f646174613a617564696f2f7761763b6261736536342c556b6c4752674141414160208201527f425851565a465a6d31304942414141414142414145412b436f4141504256414160408201527f4142414167415a474630595141410000000000000000000000000000000000006060820152606e0190565b95945050505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156111e4576111e4610e75565b500290565b600060ff8216806111fc576111fc610e75565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600060ff821660ff84168060ff0382111561124157611241610e75565b019392505050565b600060ff83168061125c5761125c610e32565b8060ff84160691505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082516112ac818460208701610db1565b7f32335f0000000000000000000000000000000000000000000000000000000000920191825250600301919050565b6000826112ea576112ea610e32565b50049056fe00198d001b12001cae001e6200203100221b00242200264800288f002af8002d8600303b00331900362300395b003cc4004061004435004844004c9000511d0055f0005b0c006076006633006c460072b60079890080c300886b00908700992000a23a00abe000b61800c0ec00cc6500d88d00e56d00f3110101850110d601210f01323f0144750157c0016c310181d90198ca01b11901cada01e62302030b0221ab02421e02647e0288ea02af8002d8620303b10331940362320395b403cc4604061604435704843c04c8fc0511d4055f0005b0c306076306632906c464072b6707988b080c2c0886ad0908770991f90a23a80abe000b61860c0ec54142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122038deecd26351a3ac081c3bd57c95a92ed4e94af97a2f67452e9f5e71aaa1587764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c4df382614610030575b600080fd5b61004361003e366004610d98565b610059565b6040516100509190610de1565b60405180910390f35b60606100648261006a565b92915050565b60408051620186a0808252620186c082019092526060916000919060208201818036833701905050905060006100a084836105f7565b905060006100af604086610e61565b905060006100c26040600688901c610e61565b604080516060810182528181529192506101f4916000916113ec602083013990506000806100f1876020610ea4565b90506001830191508088019050600060405180610120016040528060fc81526020016112f060fc913960408051600480825260a082019092529192506000918291602082016080803683370190505090506000965060005b612df68110156105d65761223e81111561018d57610168600282610e61565b1580156101755750600088115b1561018857610185600189610ebc565b97505b6101c4565b610198600382610e61565b610188576101f488101561018857610185600189610ea4565b8060008112156101bf576000035b919050565b612af861271062ffffff60038d0260200187015160e81c1602046000805b600381101561057b5760008615610562578c6102395761020e620f42406002620f42408a0602036101b1565b60029081027ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0010590505b60018d14156102bb57620f42408707620d59f881121561025d576007601082020591505b620d59f881131561027457601081620f4240030291505b620d59f881141561028b57601081620f4240030291505b50620f42407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc09091016207a12002055b60028d14156102f55750620f42407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85ee081880701620aae6002055b60038d141561033e57507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0620f424087076207a12081101561033857620f424091505b50600490055b60048d141561038357507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0620f424087076204c4b481101561038157620f424091505b505b60058d14156103e257600487029050620f42406207a120620186a06207a12060026207a1206103c5620f4240621e8480620f42406207a1208b020507036101b1565b03056103da620f4240621e84808807036101b1565b010303020590505b60068d14156104db5760208601516040870151606088015160808901516380000000613039856341c64e6d020106935062027100620f4240848d03020482915080620f424001620f42406308000000621e848088020403828401020592508b9350620f42408160020360036004868601020502059550507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc08512156104a5577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc094505b620f42408513156104b757620f424094505b60208a0193909352604089019190915260608801526080870152600a600591909102055b60078d141561054957506002868102906203d090906207a12061052a7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0621e8480608060fe8e020507016101b1565b0305036207a120610544620f4240621e84808507036101b1565b030190505b6102bc8c82020590506080621e84806101008302050190505b95830195600882026010031b91909101906001016101e2565b50603f8160121c168801518753600187019650603f81600c1c168801518753600187019650603f8160061c168801518753600187019650603f811688015187535050600194909401936105cf600382610ea4565b9050610149565b506105e68b8587612df68e6106d9565b50989b9a5050505050505050505050565b60008061060384610904565b90506000818260405160200161061a929190610eef565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805190915060208083019086015b6020831061069357815181527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610656565b905181516020939093036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909116921691909117905251949350505050565b60228453600184019350607d84536001840193506020858503038552600060086001846107069190610ebc565b6107119060026111ac565b61071c90602c610ea4565b6107269190610ebc565b90506000602c610737836008610ea4565b6107419190610ebc565b90506034610750846020610ea4565b61075a9190610ebc565b603f602084901b64ff0000000016601085811b63ff000000169190910162ff00008616019085901c61ff0016016546000000005701602a81901c919091168701519189019750908753600187019650603f8160241c168601518753600187019650603f81601e1c168601518753600187019650603f8160181c168601518753600187019650603f8160121c168601518753600187019650603f81600c1c168601518753600187019650603f8160061c168601518753600187019650603f8116860151875350600461082c846020610ea4565b6108369190610ebc565b603f602083901b64ff0000000016601084811b63ff000000169190910162ff00008516019084901c61ff0016016561000000005701602a81901c919091168701519189019750908753600187019650603f8160241c168601518753600187019650603f81601e1c168601518753600187019650603f8160181c168601518753600187019650603f8160121c168601518753600187019650603f81600c1c168601518753600187019650603f8160061c168601518753600187019650603f811686015187535050505050505050565b60606000610913604084610e61565b905060006109266040600686901c610e61565b90508061096a576040518060400160405280600d81526020017f545249414e474c452532305f5f000000000000000000000000000000000000008152509250610b50565b80600114156109b0576040518060400160405280601181526020017f54494c5445442532305341572532305f5f0000000000000000000000000000008152509250610b50565b80600214156109f6576040518060400160405280600881526020017f5341572532305f5f0000000000000000000000000000000000000000000000008152509250610b50565b8060031415610a3c576040518060400160405280600b81526020017f5351554152452532305f5f0000000000000000000000000000000000000000008152509250610b50565b8060041415610a82576040518060400160405280600a81526020017f50554c53452532305f5f000000000000000000000000000000000000000000008152509250610b50565b8060051415610ac8576040518060400160405280600a81526020017f4f5247414e2532305f5f000000000000000000000000000000000000000000008152509250610b50565b8060061415610b0e576040518060400160405280600a81526020017f4e4f4953452532305f5f000000000000000000000000000000000000000000008152509250610b50565b8060071415610b50576040518060400160405280600b81526020017f5048415345522532305f5f00000000000000000000000000000000000000000081525092505b6000610b5d600c84610e61565b90508060ff811615610b775780610b73816111e9565b9150505b60028260ff161115610b915780610b8d816111e9565b9150505b60058260ff161115610bab5780610ba7816111e9565b9150505b60078260ff161115610bc55780610bc1816111e9565b9150505b60098260ff161115610bdf5780610bdb816111e9565b9150505b6007610bec826002611224565b610bf69190611249565b610c01906041611224565b60f81b8560028751610c139190610ebc565b81518110610c2357610c2361126b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160ff1660011480610c6757508160ff166003145b80610c7557508160ff166006145b80610c8357508160ff166008145b80610c9157508160ff16600a145b15610d28577f25000000000000000000000000000000000000000000000000000000000000008560018751610cc69190610ebc565b81518110610cd657610cd661126b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535084604051602001610d16919061129a565b60405160208183030381529060405294505b610d33600c856112db565b610d3e906030611224565b60f81b8560018751610d509190610ebc565b81518110610d6057610d6061126b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050505050919050565b600060208284031215610daa57600080fd5b5035919050565b60005b83811015610dcc578181015183820152602001610db4565b83811115610ddb576000848401525b50505050565b6020815260008251806020840152610e00816040850160208701610db1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610e7057610e70610e32565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610eb757610eb7610e75565b500190565b600082821015610ece57610ece610e75565b500390565b60008151610ee5818560208601610db1565b9290920192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e2c7b226e616d65223a2200815260008351610f2781601f850160208801610db1565b7f222c226465736372697074696f6e223a2241253230736f756e6425323066756c601f918401918201527f6c7925323067656e6572617465642532306f6e636861696e222c226578746572603f8201527f6e616c5f75726c223a2200000000000000000000000000000000000000000000605f8201527f68747470733a2f2f626c656570732e6574682e6c696e6b00000000000000000060698201527f222c22696d616765223a22646174613a696d6167652f7376672b786d6c2c3c7360808201527f7667253235323076696577426f783d273025323532303025323532303332253260a08201527f35323031362725323532303e3c746578742532353230783d273136272532353260c08201527f30793d2738272532353230646f6d696e616e742d626173656c696e653d276d6960e08201527f64646c65272532353230746578742d616e63686f723d276d6964646c652725326101008201527f3532307374796c653d2766696c6c3a2532353230726762283231392c253235326101208201527f3033392c2532353230313139293b2532353230666f6e742d73697a653a2532356101408201527f3230313270783b273e00000000000000000000000000000000000000000000006101608201526111a3611108610169830186610ed3565b7f3c2f746578743e3c2f7376673e222c22616e696d6174696f6e5f75726c223a2281527f646174613a617564696f2f7761763b6261736536342c556b6c4752674141414160208201527f425851565a465a6d31304942414141414142414145412b436f4141504256414160408201527f4142414167415a474630595141410000000000000000000000000000000000006060820152606e0190565b95945050505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156111e4576111e4610e75565b500290565b600060ff8216806111fc576111fc610e75565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600060ff821660ff84168060ff0382111561124157611241610e75565b019392505050565b600060ff83168061125c5761125c610e32565b8060ff84160691505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082516112ac818460208701610db1565b7f32335f0000000000000000000000000000000000000000000000000000000000920191825250600301919050565b6000826112ea576112ea610e32565b50049056fe00198d001b12001cae001e6200203100221b00242200264800288f002af8002d8600303b00331900362300395b003cc4004061004435004844004c9000511d0055f0005b0c006076006633006c460072b60079890080c300886b00908700992000a23a00abe000b61800c0ec00cc6500d88d00e56d00f3110101850110d601210f01323f0144750157c0016c310181d90198ca01b11901cada01e62302030b0221ab02421e02647e0288ea02af8002d8620303b10331940362320395b403cc4604061604435704843c04c8fc0511d4055f0005b0c306076306632906c464072b6707988b080c2c0886ad0908770991f90a23a80abe000b61860c0ec54142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122038deecd26351a3ac081c3bd57c95a92ed4e94af97a2f67452e9f5e71aaa1587764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}