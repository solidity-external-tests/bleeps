{
  "address": "0xa6a60C41500493a96aE9aD3F5aD49B782bAaFfCF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "d1",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "d2",
          "type": "bytes32"
        }
      ],
      "name": "wav",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x82cbac8dfb85c7e6585703068db4a85cb1786699494a984b775875c0d5bd3bd9",
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0xa6a60C41500493a96aE9aD3F5aD49B782bAaFfCF",
    "transactionIndex": 2,
    "gasUsed": "921476",
    "logsBloom": "0x
    "blockHash": "0x6ea7b9de6489279b6a8d4fd493e6d37ab120baf7fd85ecc06d6c59d1d0c5e33c",
    "transactionHash": "0x82cbac8dfb85c7e6585703068db4a85cb1786699494a984b775875c0d5bd3bd9",
    "logs": [],
    "blockNumber": 5725633,
    "cumulativeGasUsed": "1003517",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "596d2ac5c800e142c3a4be152947f99a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"d1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"d2\",\"type\":\"bytes32\"}],\"name\":\"wav\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MeloBleepsTokenURI.sol\":\"MeloBleepsTokenURI\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"src/MeloBleepsTokenURI.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/* solhint-disable quotes */\\n\\ncontract MeloBleepsTokenURI {\\n    string internal constant TABLE_ENCODE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    bytes internal constant FREQUENCIES =\\n        hex\\\"00198d001b12001cae001e6200203100221b00242200264800288f002af8002d8600303b00331900362300395b003cc4004061004435004844004c9000511d0055f0005b0c006076006633006c460072b60079890080c300886b00908700992000a23a00abe000b61800c0ec00cc6500d88d00e56d00f3110101850110d601210f01323f0144750157c0016c310181d90198ca01b11901cada01e62302030b0221ab02421e02647e0288ea02af8002d8620303b10331940362320395b403cc4604061604435704843c04c8fc0511d4055f0005b0c306076306632906c464072b6707988b080c2c0886ad0908770991f90a23a80abe000b61860c0ec5\\\";\\n\\n    // settings for sound quality\\n    uint256 internal constant SAMPLE_RATE = 11000;\\n    uint256 internal constant BYTES_PER_SAMPLE = 1;\\n\\n    // constants for ensuring enough precision when computing values\\n    int256 internal constant ONE = 1000000;\\n    int256 internal constant TWO = 2000000; // 2 * ONE;\\n    int256 internal constant HALF = 500000; // ONE/ 2;\\n    int256 internal constant ZERO7 = 700000; // (ONE * 7) / 10;\\n    int256 internal constant ZERO3 = 300000; // (ONE * 3) / 10;\\n    int256 internal constant ZERO1 = 100000; //(ONE * 1) / 10;\\n    int256 internal constant ZERO3125 = 312500; //( ONE * 3125) / 10000;\\n    int256 internal constant ZERO8750 = 875000; // (ONE * 8750) / 10000;\\n    int256 internal constant MINUS_ONE = -1000000; //; -ONE;\\n    int256 internal constant MIN_VALUE = MINUS_ONE + 1;\\n    int256 internal constant MAX_VALUE = ONE - 1;\\n\\n    // allow to switch sign in assembly via mul(MINUS, x)\\n    int256 internal constant MINUS = -1;\\n\\n    // sample rate: 22050 , bitsPerSample: 16bit\\n    // bytes internal constant metadataStart =\\n    //     'data:application/json,{\\\"name\\\":\\\"__________________________________\\\",\\\"description\\\":\\\"A_sound_fully_generated_onchain\\\",\\\"external_url\\\":\\\"?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\\\",\\\"image\\\":\\\"data:image/svg+xml,<svg viewBox=\\\\'0 0 32 16\\\\' ><text x=\\\\'50%\\\\' y=\\\\'50%\\\\' dominant-baseline=\\\\'middle\\\\' text-anchor=\\\\'middle\\\\' style=\\\\'fill: rgb(219, 39, 119); font-size: 12px;\\\\'>__________________________________</text></svg>\\\",\\\"animation_url\\\":\\\"data:audio/wav;base64,UklGRgAAAABXQVZFZm10IBAAAAABAAEAIlYAAESsAAACABAAZGF0YQAA'; // missing 2 zero bytes\\n\\n    // sample rate: 11000 , bitsPerSample: 16bit\\n    // bytes internal constant metadataStart =\\n    // 'data:application/json,{\\\"name\\\":\\\"__________________________________\\\",\\\"description\\\":\\\"A_sound_fully_generated_onchain\\\",\\\"external_url\\\":\\\"?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\\\",\\\"image\\\":\\\"data:image/svg+xml,<svg viewBox=\\\\'0 0 32 16\\\\' ><text x=\\\\'50%\\\\' y=\\\\'50%\\\\' dominant-baseline=\\\\'middle\\\\' text-anchor=\\\\'middle\\\\' style=\\\\'fill: rgb(219, 39, 119); font-size: 12px;\\\\'>__________________________________</text></svg>\\\",\\\"animation_url\\\":\\\"data:audio/wav;base64,UklGRgAAAABXQVZFZm10IBAAAAABAAEA+CoAAPBVAAACABAAZGF0YQAA'; // missing 2 zero bytes\\n\\n    // sample rate: 11000 , bitsPerSample: 8bit\\n    // bytes internal constant metadataStart =\\n    //     'data:application/json,{\\\"name\\\":\\\"__________________________________\\\",\\\"description\\\":\\\"A_sound_fully_generated_onchain\\\",\\\"external_url\\\":\\\"?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\\\",\\\"image\\\":\\\"data:image/svg+xml,<svg viewBox=\\\\'0 0 32 16\\\\' ><text x=\\\\'50%\\\\' y=\\\\'50%\\\\' dominant-baseline=\\\\'middle\\\\' text-anchor=\\\\'middle\\\\' style=\\\\'fill: rgb(219, 39, 119); font-size: 12px;\\\\'>__________________________________</text></svg>\\\",\\\"animation_url\\\":\\\"data:audio/wav;base64,UklGRgAAAABXQVZFZm10IBAAAAABAAEA+CoAAPBVAAABAAgAZGF0YQAA'; // missing 2 zero bytes\\n\\n    function wav(bytes32 d1, bytes32 d2) external view returns (string memory) {\\n        return _generateWav(d1, d2);\\n    }\\n\\n    function _prepareBuffer(bytes memory buffer) internal pure returns (uint256 l) {\\n        bytes memory start = bytes.concat(\\n            'data:application/json,{\\\"name\\\":\\\"',\\n            \\\"hello\\\",\\n            '\\\",\\\"description\\\":\\\"A_sound_fully_generated_onchain\\\",\\\"external_url\\\":\\\"',\\n            \\\"https://hello\\\",\\n            \\\"\\\\\\\",\\\\\\\"image\\\\\\\":\\\\\\\"data:image/svg+xml,<svg viewBox='0 0 32 16' ><text x='50%' y='50%' dominant-baseline='middle' text-anchor='middle' style='fill: rgb(219, 39, 119); font-size: 12px;'>\\\",\\n            \\\"hello\\\",\\n            '</text></svg>\\\",\\\"animation_url\\\":\\\"data:audio/wav;base64,UklGRgAAAABXQVZFZm10IBAAAAABAAEA+CoAAPBVAAABAAgAZGF0YQAA'\\n        ); // missing 2 zero bytes\\n        uint256 len = start.length;\\n        uint256 src;\\n        uint256 dest;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            src := add(start, 0x20)\\n            dest := add(buffer, 0x20)\\n        }\\n        for (; len >= 32; len -= 32) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n        // TODO remove that step by ensuring the length is a multiple of 32 bytes\\n        uint256 mask = 256**(32 - len) - 1;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n        return start.length;\\n    }\\n\\n    function _finishBuffer(\\n        bytes memory buffer,\\n        uint256 resultPtr,\\n        uint256 tablePtr,\\n        uint256 numSamplesPlusOne,\\n        uint256 startLength\\n    ) internal pure {\\n        // write ends + size in buffer\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore8(resultPtr, 0x22) // \\\"\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, 0x7D) // }\\n            resultPtr := add(resultPtr, 1)\\n            mstore(buffer, sub(sub(resultPtr, buffer), 32))\\n        }\\n\\n        // compute chnksize (TODO hardcode)\\n        uint256 filesizeMinus8 = ((numSamplesPlusOne - 1) * 2 + 44) - 8;\\n        uint256 chunkSize = filesizeMinus8 + 8 - 44;\\n\\n        // filesize // 46 00 00\\n        resultPtr = startLength + 32 - 52;\\n        assembly {\\n            resultPtr := add(buffer, resultPtr)\\n            let v := shl(40, 0x46)\\n            v := add(v, shl(32, and(filesizeMinus8, 255)))\\n            v := add(v, shl(24, and(shr(8, filesizeMinus8), 255)))\\n            v := add(v, shl(16, and(shr(16, filesizeMinus8), 255)))\\n            v := add(v, shl(8, and(shr(24, filesizeMinus8), 255)))\\n            v := add(v, 0x57)\\n            // write 8 characters\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(42, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(36, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(30, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(24, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(18, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(12, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(6, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(v, 0x3F))))\\n        }\\n\\n        // // // chunksize // 61 00 00\\n        resultPtr = startLength + 32 - 4;\\n        assembly {\\n            resultPtr := add(buffer, resultPtr)\\n            let v := shl(40, 0x61)\\n            v := add(v, shl(32, and(chunkSize, 255)))\\n            v := add(v, shl(24, and(shr(8, chunkSize), 255)))\\n            v := add(v, shl(16, and(shr(16, chunkSize), 255)))\\n            v := add(v, shl(8, and(shr(24, chunkSize), 255)))\\n            v := add(v, 0x57)\\n            // write 8 characters\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(42, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(36, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(30, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(24, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(18, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(12, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(6, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(v, 0x3F))))\\n        }\\n    }\\n\\n    function _generateWav(bytes32 d1, bytes32 d2) internal view returns (string memory) {\\n        bytes memory buffer = new bytes(500000);\\n        uint256 startLength = _prepareBuffer(buffer);\\n\\n        string memory table = TABLE_ENCODE;\\n        uint256 tablePtr;\\n        uint256 resultPtr = startLength + 32;\\n        assembly {\\n            // prepare the lookup table\\n            tablePtr := add(table, 1)\\n\\n            // set write pointer\\n            resultPtr := add(buffer, resultPtr)\\n        }\\n\\n        bytes memory freqTable = FREQUENCIES;\\n\\n        uint256 numSamplesPlusOne = (3 * (((32 * (61 * 16 * SAMPLE_RATE)) / (7350)) + 1)) / 3; //3 * 3 * ((22050 + 3) / 3); // 8 = speed\\n\\n        uint256[] memory noise_handler = new uint256[](4);\\n\\n        // console.log(\\\"numSamplesPlusOne %i\\\", numSamplesPlusOne);\\n        int256 pos = 0;\\n\\n        for (uint256 i = 0; i < numSamplesPlusOne; i += 3) {\\n            assembly {\\n                function abs(a) -> b {\\n                    b := a\\n                    if lt(b, 0) {\\n                        b := mul(b, MINUS)\\n                    }\\n                }\\n\\n                let meloIndex := div(i, div(numSamplesPlusOne, 32)) // TODO numSamples\\n                let data := d1\\n                if gt(meloIndex, 15) {\\n                    data := d2\\n                    meloIndex := sub(meloIndex, 16)\\n                    if gt(meloIndex, 15) {\\n                        meloIndex := 15\\n                    }\\n                }\\n                data := and(shr(add(16, mul(sub(15, meloIndex), 15)), data), 0x3FFF) // sub(15) is to divide the data in 2\\n                let note := and(data, 0x3F)\\n                let instr := and(shr(6, data), 0x07)\\n                let vol := and(shr(9, data), 0x07)\\n\\n                let posStep := div(\\n                    mul(and(shr(232, mload(add(freqTable, add(32, mul(note, 3))))), 0xFFFFFF), 10000),\\n                    SAMPLE_RATE\\n                )\\n\\n                let v := 0\\n                for {\\n                    let c := 0\\n                } lt(c, 3) {\\n                    c := add(c, 1)\\n                } {\\n                    let intValue := 0\\n                    // skip first value as it pertain to the double bytes for chunksize\\n                    if gt(pos, 0) {\\n                        // tri\\n                        if eq(instr, 0) {\\n                            intValue := sub(mul(smod(pos, ONE), 2), ONE)\\n                            if slt(intValue, 0) {\\n                                intValue := sub(0, intValue)\\n                            }\\n                            intValue := sub(mul(intValue, 2), ONE)\\n                            intValue := sdiv(mul(intValue, HALF), ONE)\\n                        }\\n                        if eq(instr, 1) {\\n                            // uneven_tri\\n                            let tmp := smod(pos, ONE)\\n                            if slt(tmp, ZERO8750) {\\n                                intValue := sdiv(mul(tmp, 16), 7)\\n                            }\\n                            if sgt(tmp, ZERO8750) {\\n                                intValue := mul(sub(ONE, tmp), 16)\\n                            }\\n                            if eq(tmp, ZERO8750) {\\n                                intValue := mul(sub(ONE, tmp), 16)\\n                            }\\n                            intValue := sdiv(mul(sub(intValue, ONE), HALF), ONE)\\n                        }\\n                        if eq(instr, 2) {\\n                            // saw\\n                            intValue := sdiv(mul(sub(smod(pos, ONE), HALF), ZERO7), ONE)\\n                        }\\n                        if eq(instr, 3) {\\n                            // square\\n                            let tmp := smod(pos, ONE)\\n                            intValue := MINUS_ONE\\n                            if lt(tmp, HALF) {\\n                                intValue := ONE\\n                            }\\n                            intValue := sdiv(intValue, 4)\\n                        }\\n                        if eq(instr, 4) {\\n                            // pulse\\n                            let tmp := smod(pos, ONE)\\n                            intValue := MINUS_ONE\\n                            if lt(tmp, ZERO3125) {\\n                                intValue := ONE\\n                            }\\n                        }\\n                        if eq(instr, 5) {\\n                            // tri2\\n                            intValue := mul(pos, 4)\\n                            intValue := sdiv(\\n                                mul(\\n                                    sub(\\n                                        sub(\\n                                            add(\\n                                                abs(sub(smod(intValue, TWO), ONE)),\\n                                                sdiv(\\n                                                    sub(abs(sub(smod(sdiv(mul(intValue, HALF), ONE), TWO), ONE)), HALF),\\n                                                    2\\n                                                )\\n                                            ),\\n                                            HALF\\n                                        ),\\n                                        ZERO1\\n                                    ),\\n                                    ZERO1\\n                                ),\\n                                ONE\\n                            )\\n                        }\\n                        if eq(instr, 6) {\\n                            let rand := mload(add(noise_handler, 32))\\n                            let lastx := mload(add(noise_handler, 64))\\n                            let sample := mload(add(noise_handler, 96))\\n                            let lsample := mload(add(noise_handler, 128))\\n\\n                            rand := mod(add(mul(1103515245, rand), 12345), 0x80000000)\\n                            let scale := div(mul(sub(pos, lastx), ONE), 160000) // 2489  = note_to_hz(63)  => 2489 * 10000000 / 11000 (sample rate) => 2262727 (160000 is from js)\\n                            lsample := sample\\n                            sample := sdiv(\\n                                mul(add(lsample, scale), sub(div(mul(rand, TWO), 0x8000000), ONE)),\\n                                add(ONE, scale)\\n                            )\\n                            lastx := pos\\n                            intValue := sdiv(mul(sdiv(mul(add(lsample, sample), 4), 3), sub(2, scale)), ONE) // 2 => 1.75\\n                            if slt(intValue, MINUS_ONE) {\\n                                intValue := MINUS_ONE\\n                            }\\n                            if sgt(intValue, ONE) {\\n                                intValue := ONE\\n                            }\\n                            intValue := sdiv(mul(intValue, 5), 10)\\n                            // noise_handler := or(rand, or(shl(64, lastx), add(shl(128, sample), shl(196, lsample))))\\n                            mstore(add(noise_handler, 32), rand)\\n                            mstore(add(noise_handler, 64), lastx)\\n                            mstore(add(noise_handler, 96), sample)\\n                            mstore(add(noise_handler, 128), lsample)\\n                        }\\n                        if eq(instr, 7) {\\n                            // detuned_tri\\n                            intValue := mul(pos, 2)\\n                            intValue := add(\\n                                sub(abs(sub(smod(intValue, TWO), ONE)), HALF),\\n                                sub(\\n                                    sdiv(sub(abs(sub(smod(sdiv(mul(intValue, 127), 128), TWO), ONE)), HALF), 2),\\n                                    sdiv(ONE, 4)\\n                                )\\n                            )\\n                        }\\n                        intValue := sdiv(mul(intValue, vol), 7) // getValue(pos, instr)\\n                        intValue := add(sdiv(mul(intValue, 256), TWO), 128) // TODO never go negative\\n                    }\\n                    v := add(v, shl(sub(16, mul(c, 8)), intValue))\\n                    pos := add(pos, posStep)\\n                }\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, v), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, v), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, v), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(v, 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n        }\\n\\n        _finishBuffer(buffer, resultPtr, tablePtr, numSamplesPlusOne, startLength);\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc6b8cd11f7a8657aaa1c8212cde57adc22cebfddd0f173e907e8a7c5be4b49fa\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610fc1806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d63fab2b14610030575b600080fd5b61004361003e36600461091d565b610059565b604051610050919061093f565b60405180910390f35b6060610065838361006e565b90505b92915050565b604080516207a1208082526207a14082019092526060916000919060208201818036833701905050905060006100a38261062f565b90506000604051806060016040528060408152602001610f4c6040913990506000806100d08460206109e1565b90506001830191508085019050600060405180610120016040528060fc8152602001610e5060fc9139905060006003611cb6610110612af86103d06109f9565b61011b9060206109f9565b6101259190610a36565b6101309060016109e1565b61013b9060036109f9565b6101459190610a36565b60408051600480825260a0820190925291925060009190602082016080803683370190505090506000805b83811015610611576020840481048d600f8211156101ba57507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0018c600f8211156101ba57600f91505b613fff81600f84600f03026010011c169050603f8116915060078160061c1660078260091c169150612af861271062ffffff600386026020018b015160e81c16020492506000805b60038110156105b4576000871561059b578361026a57507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0620f42408807600202016000811215610251576000035b620f424060028202039050620f42406207a12082020590505b60018414156102ec57620f42408807620d59f881121561028e576007601082020591505b620d59f88113156102a557601081620f4240030291505b620d59f88114156102bc57601081620f4240030291505b50620f42407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc09091016207a12002055b60028414156103265750620f42407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85ee081890701620aae6002055b600384141561036f57507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0620f424088076207a12081101561036957620f424091505b50600490055b60048414156103b457507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0620f424088076204c4b48110156103b257620f424091505b505b600584141561042357600488029050620f4240620186a0806207a12060026207a1206103f1620f4240621e8480620f42406207a1208b0205070390565b03057ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0621e8480870701010303020590505b600684141561051c57602089015160408a015160608b015160808c01516380000000613039856341c64e6d020106935062027100620f4240848e03020482915080620f424001620f42406308000000621e848088020403828401020592508c9350620f42408160020360036004868601020502059550507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc08512156104e6577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc094505b620f42408513156104f857620f424094505b60208d019390935260408c019190915260608b015260808a0152600a600591909102055b600784141561058357506002621e8480608060fe8a02058190077fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe91ca00182900591890207017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe54c10015b60078582020590506080621e84806101008302050190505b96850196600882026010031b9190910190600101610202565b50603f8160121c168b01518a5360018a019950603f81600c1c168b01518a5360018a019950603f8160061c168b01518a5360018a019950603f81168b01518a53505050600196909601955061060a6003826109e1565b9050610170565b5061061f898688868c6106f2565b50969a9950505050505050505050565b60008060405160200161064190610a71565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805190915060208083019085015b602083106106b557815181526106946020826109e1565b90506106a16020836109e1565b91506106ae602084610d0c565b925061067d565b600060016106c4856020610d0c565b6106d090610100610e43565b6106da9190610d0c565b92518251841693191692909217905250505192915050565b60228453600184019350607d845360018401935060208585030385526000600860018461071f9190610d0c565b61072a9060026109f9565b61073590602c6109e1565b61073f9190610d0c565b90506000602c6107508360086109e1565b61075a9190610d0c565b905060346107698460206109e1565b6107739190610d0c565b603f602084901b64ff0000000016601085811b63ff000000169190910162ff00008616019085901c61ff0016016546000000005701602a81901c919091168701519189019750908753600187019650603f8160241c168601518753600187019650603f81601e1c168601518753600187019650603f8160181c168601518753600187019650603f8160121c168601518753600187019650603f81600c1c168601518753600187019650603f8160061c168601518753600187019650603f811686015187535060046108458460206109e1565b61084f9190610d0c565b603f602083901b64ff0000000016601084811b63ff000000169190910162ff00008516019084901c61ff0016016561000000005701602a81901c919091168701519189019750908753600187019650603f8160241c168601518753600187019650603f81601e1c168601518753600187019650603f8160181c168601518753600187019650603f8160121c168601518753600187019650603f81600c1c168601518753600187019650603f8160061c168601518753600187019650603f811686015187535050505050505050565b6000806040838503121561093057600080fd5b50508035926020909101359150565b600060208083528351808285015260005b8181101561096c57858101830151858201604001528201610950565b8181111561097e576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156109f4576109f46109b2565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a3157610a316109b2565b500290565b600082610a6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f646174613a6170706c69636174696f6e2f6a736f6e2c7b226e616d65223a220081527f68656c6c6f000000000000000000000000000000000000000000000000000000601f8201527f222c226465736372697074696f6e223a22415f736f756e645f66756c6c795f6760248201527f656e6572617465645f6f6e636861696e222c2265787465726e616c5f75726c2260448201527f3a2200000000000000000000000000000000000000000000000000000000000060648201527f68747470733a2f2f68656c6c6f0000000000000000000000000000000000000060668201527f222c22696d616765223a22646174613a696d6167652f7376672b786d6c2c3c7360738201527f76672076696577426f783d2730203020333220313627203e3c7465787420783d60938201527f273530252720793d273530252720646f6d696e616e742d626173656c696e653d60b38201527f276d6964646c652720746578742d616e63686f723d276d6964646c652720737460d38201527f796c653d2766696c6c3a20726762283231392c2033392c20313139293b20666f60f38201527f6e742d73697a653a20313270783b273e00000000000000000000000000000000610113820152610c6461012382017f68656c6c6f0000000000000000000000000000000000000000000000000000009052565b7f3c2f746578743e3c2f7376673e222c22616e696d6174696f6e5f75726c223a226101288201527f646174613a617564696f2f7761763b6261736536342c556b6c475267414141416101488201527f425851565a465a6d31304942414141414142414145412b436f414150425641416101688201527f4142414167415a4746305951414100000000000000000000000000000000000061018882015260006101968201610068565b600082821015610d1e57610d1e6109b2565b500390565b600181815b80851115610d7c57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610d6257610d626109b2565b80851615610d6f57918102915b93841c9390800290610d28565b509250929050565b600082610d9357506001610068565b81610da057506000610068565b8160018114610db65760028114610dc057610ddc565b6001915050610068565b60ff841115610dd157610dd16109b2565b50506001821b610068565b5060208310610133831016604e8410600b8410161715610dff575081810a610068565b610e098383610d23565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610e3b57610e3b6109b2565b029392505050565b60006100658383610d8456fe00198d001b12001cae001e6200203100221b00242200264800288f002af8002d8600303b00331900362300395b003cc4004061004435004844004c9000511d0055f0005b0c006076006633006c460072b60079890080c300886b00908700992000a23a00abe000b61800c0ec00cc6500d88d00e56d00f3110101850110d601210f01323f0144750157c0016c310181d90198ca01b11901cada01e62302030b0221ab02421e02647e0288ea02af8002d8620303b10331940362320395b403cc4604061604435704843c04c8fc0511d4055f0005b0c306076306632906c464072b6707988b080c2c0886ad0908770991f90a23a80abe000b61860c0ec54142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212201cda9b33edb530df58a88a81d48d9ff3bd863a6fe431f6afaa515b259b67d3bd64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d63fab2b14610030575b600080fd5b61004361003e36600461091d565b610059565b604051610050919061093f565b60405180910390f35b6060610065838361006e565b90505b92915050565b604080516207a1208082526207a14082019092526060916000919060208201818036833701905050905060006100a38261062f565b90506000604051806060016040528060408152602001610f4c6040913990506000806100d08460206109e1565b90506001830191508085019050600060405180610120016040528060fc8152602001610e5060fc9139905060006003611cb6610110612af86103d06109f9565b61011b9060206109f9565b6101259190610a36565b6101309060016109e1565b61013b9060036109f9565b6101459190610a36565b60408051600480825260a0820190925291925060009190602082016080803683370190505090506000805b83811015610611576020840481048d600f8211156101ba57507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0018c600f8211156101ba57600f91505b613fff81600f84600f03026010011c169050603f8116915060078160061c1660078260091c169150612af861271062ffffff600386026020018b015160e81c16020492506000805b60038110156105b4576000871561059b578361026a57507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0620f42408807600202016000811215610251576000035b620f424060028202039050620f42406207a12082020590505b60018414156102ec57620f42408807620d59f881121561028e576007601082020591505b620d59f88113156102a557601081620f4240030291505b620d59f88114156102bc57601081620f4240030291505b50620f42407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc09091016207a12002055b60028414156103265750620f42407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85ee081890701620aae6002055b600384141561036f57507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0620f424088076207a12081101561036957620f424091505b50600490055b60048414156103b457507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0620f424088076204c4b48110156103b257620f424091505b505b600584141561042357600488029050620f4240620186a0806207a12060026207a1206103f1620f4240621e8480620f42406207a1208b0205070390565b03057ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0621e8480870701010303020590505b600684141561051c57602089015160408a015160608b015160808c01516380000000613039856341c64e6d020106935062027100620f4240848e03020482915080620f424001620f42406308000000621e848088020403828401020592508c9350620f42408160020360036004868601020502059550507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc08512156104e6577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc094505b620f42408513156104f857620f424094505b60208d019390935260408c019190915260608b015260808a0152600a600591909102055b600784141561058357506002621e8480608060fe8a02058190077fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe91ca00182900591890207017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe54c10015b60078582020590506080621e84806101008302050190505b96850196600882026010031b9190910190600101610202565b50603f8160121c168b01518a5360018a019950603f81600c1c168b01518a5360018a019950603f8160061c168b01518a5360018a019950603f81168b01518a53505050600196909601955061060a6003826109e1565b9050610170565b5061061f898688868c6106f2565b50969a9950505050505050505050565b60008060405160200161064190610a71565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805190915060208083019085015b602083106106b557815181526106946020826109e1565b90506106a16020836109e1565b91506106ae602084610d0c565b925061067d565b600060016106c4856020610d0c565b6106d090610100610e43565b6106da9190610d0c565b92518251841693191692909217905250505192915050565b60228453600184019350607d845360018401935060208585030385526000600860018461071f9190610d0c565b61072a9060026109f9565b61073590602c6109e1565b61073f9190610d0c565b90506000602c6107508360086109e1565b61075a9190610d0c565b905060346107698460206109e1565b6107739190610d0c565b603f602084901b64ff0000000016601085811b63ff000000169190910162ff00008616019085901c61ff0016016546000000005701602a81901c919091168701519189019750908753600187019650603f8160241c168601518753600187019650603f81601e1c168601518753600187019650603f8160181c168601518753600187019650603f8160121c168601518753600187019650603f81600c1c168601518753600187019650603f8160061c168601518753600187019650603f811686015187535060046108458460206109e1565b61084f9190610d0c565b603f602083901b64ff0000000016601084811b63ff000000169190910162ff00008516019084901c61ff0016016561000000005701602a81901c919091168701519189019750908753600187019650603f8160241c168601518753600187019650603f81601e1c168601518753600187019650603f8160181c168601518753600187019650603f8160121c168601518753600187019650603f81600c1c168601518753600187019650603f8160061c168601518753600187019650603f811686015187535050505050505050565b6000806040838503121561093057600080fd5b50508035926020909101359150565b600060208083528351808285015260005b8181101561096c57858101830151858201604001528201610950565b8181111561097e576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156109f4576109f46109b2565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a3157610a316109b2565b500290565b600082610a6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f646174613a6170706c69636174696f6e2f6a736f6e2c7b226e616d65223a220081527f68656c6c6f000000000000000000000000000000000000000000000000000000601f8201527f222c226465736372697074696f6e223a22415f736f756e645f66756c6c795f6760248201527f656e6572617465645f6f6e636861696e222c2265787465726e616c5f75726c2260448201527f3a2200000000000000000000000000000000000000000000000000000000000060648201527f68747470733a2f2f68656c6c6f0000000000000000000000000000000000000060668201527f222c22696d616765223a22646174613a696d6167652f7376672b786d6c2c3c7360738201527f76672076696577426f783d2730203020333220313627203e3c7465787420783d60938201527f273530252720793d273530252720646f6d696e616e742d626173656c696e653d60b38201527f276d6964646c652720746578742d616e63686f723d276d6964646c652720737460d38201527f796c653d2766696c6c3a20726762283231392c2033392c20313139293b20666f60f38201527f6e742d73697a653a20313270783b273e00000000000000000000000000000000610113820152610c6461012382017f68656c6c6f0000000000000000000000000000000000000000000000000000009052565b7f3c2f746578743e3c2f7376673e222c22616e696d6174696f6e5f75726c223a226101288201527f646174613a617564696f2f7761763b6261736536342c556b6c475267414141416101488201527f425851565a465a6d31304942414141414142414145412b436f414150425641416101688201527f4142414167415a4746305951414100000000000000000000000000000000000061018882015260006101968201610068565b600082821015610d1e57610d1e6109b2565b500390565b600181815b80851115610d7c57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610d6257610d626109b2565b80851615610d6f57918102915b93841c9390800290610d28565b509250929050565b600082610d9357506001610068565b81610da057506000610068565b8160018114610db65760028114610dc057610ddc565b6001915050610068565b60ff841115610dd157610dd16109b2565b50506001821b610068565b5060208310610133831016604e8410600b8410161715610dff575081810a610068565b610e098383610d23565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610e3b57610e3b6109b2565b029392505050565b60006100658383610d8456fe00198d001b12001cae001e6200203100221b00242200264800288f002af8002d8600303b00331900362300395b003cc4004061004435004844004c9000511d0055f0005b0c006076006633006c460072b60079890080c300886b00908700992000a23a00abe000b61800c0ec00cc6500d88d00e56d00f3110101850110d601210f01323f0144750157c0016c310181d90198ca01b11901cada01e62302030b0221ab02421e02647e0288ea02af8002d8620303b10331940362320395b403cc4604061604435704843c04c8fc0511d4055f0005b0c306076306632906c464072b6707988b080c2c0886ad0908770991f90a23a80abe000b61860c0ec54142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212201cda9b33edb530df58a88a81d48d9ff3bd863a6fe431f6afaa515b259b67d3bd64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}