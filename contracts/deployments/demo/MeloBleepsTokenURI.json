{
  "address": "0x6Bc6B06B96E30A475768ea6B9D195c64369A545c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "d1",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "d2",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "speed",
          "type": "uint8"
        }
      ],
      "name": "wav",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ceba0f7180034dab934c7b6ab535cc7edddf3f97b338f9d40e27be209e8e526",
  "receipt": {
    "to": null,
    "from": "0xcE1AEF3e0A5324F7AB6e21B4dacc10B82666E1e2",
    "contractAddress": "0x6Bc6B06B96E30A475768ea6B9D195c64369A545c",
    "transactionIndex": 2,
    "gasUsed": "953074",
    "logsBloom": "0x
    "blockHash": "0x523dc9318e04b1569de16db4e16656abfc74660a9e66156757996154d6d77305",
    "transactionHash": "0x8ceba0f7180034dab934c7b6ab535cc7edddf3f97b338f9d40e27be209e8e526",
    "logs": [],
    "blockNumber": 5993772,
    "cumulativeGasUsed": "1225251",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "16f2e69f6865f2e78dae7e1436a84406",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"d1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"d2\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"speed\",\"type\":\"uint8\"}],\"name\":\"wav\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/melobleeps/MeloBleepsTokenURI.sol\":\"MeloBleepsTokenURI\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"src/melobleeps/MeloBleepsTokenURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/* solhint-disable quotes */\\n\\ncontract MeloBleepsTokenURI {\\n    string internal constant TABLE_ENCODE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    bytes internal constant FREQUENCIES =\\n        hex\\\"00198d001b12001cae001e6200203100221b00242200264800288f002af8002d8600303b00331900362300395b003cc4004061004435004844004c9000511d0055f0005b0c006076006633006c460072b60079890080c300886b00908700992000a23a00abe000b61800c0ec00cc6500d88d00e56d00f3110101850110d601210f01323f0144750157c0016c310181d90198ca01b11901cada01e62302030b0221ab02421e02647e0288ea02af8002d8620303b10331940362320395b403cc4604061604435704843c04c8fc0511d4055f0005b0c306076306632906c464072b6707988b080c2c0886ad0908770991f90a23a80abe000b61860c0ec5\\\";\\n\\n    // settings for sound quality\\n    uint256 internal constant SAMPLE_RATE = 11000;\\n    uint256 internal constant BYTES_PER_SAMPLE = 1;\\n\\n    // constants for ensuring enough precision when computing values\\n    int256 internal constant ONE = 1000000;\\n    int256 internal constant HUNDRED = 100000000;\\n    int256 internal constant TWO = 2000000; // 2 * ONE;\\n    int256 internal constant FOUR = 4000000;\\n    int256 internal constant EIGHT = 8000000;\\n    int256 internal constant HALF = 500000; // ONE/ 2;\\n    int256 internal constant ZERO7 = 700000; // (ONE * 7) / 10;\\n    int256 internal constant ZERO3 = 300000; // (ONE * 3) / 10;\\n    int256 internal constant ZERO1 = 100000; //(ONE * 1) / 10;\\n    int256 internal constant ZERO3125 = 312500; //( ONE * 3125) / 10000;\\n    int256 internal constant ZERO8750 = 875000; // (ONE * 8750) / 10000;\\n    int256 internal constant MINUS_ONE = -1000000; //; -ONE;\\n    int256 internal constant MIN_VALUE = MINUS_ONE + 1;\\n    int256 internal constant MAX_VALUE = ONE - 1;\\n\\n    function wav(\\n        bytes32 d1,\\n        bytes32 d2,\\n        uint8 speed\\n    ) external pure returns (string memory) {\\n        return _generateWav(d1, d2, speed);\\n    }\\n\\n    function _prepareBuffer(bytes memory buffer) internal pure returns (uint256) {\\n        bytes memory start = bytes.concat(\\n            'data:application/json,{\\\"name\\\":\\\"',\\n            \\\"hello\\\",\\n            '\\\",\\\"description\\\":\\\"A_sound_fully_generated_onchain\\\",\\\"external_url\\\":\\\"',\\n            \\\"https://hello\\\",\\n            \\\"\\\\\\\",\\\\\\\"image\\\\\\\":\\\\\\\"data:image/svg+xml,<svg viewBox='0 0 32 16' ><text x='50%' y='50%' dominant-baseline='middle' text-anchor='middle' style='fill: rgb(219, 39, 119); font-size: 12px;'>\\\",\\n            \\\"hello\\\",\\n            '</text></svg>\\\",\\\"animation_url\\\":\\\"data:audio/wav;base64,UklGRgAAAABXQVZFZm10IBAAAAABAAEA+CoAAPBVAAABAAgAZGF0YQAA'\\n        ); // missing 2 zero bytes\\n        uint256 len = start.length;\\n        uint256 src;\\n        uint256 dest;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            src := add(start, 0x20)\\n            dest := add(buffer, 0x20)\\n        }\\n        for (; len >= 32; len -= 32) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n        // TODO remove that step by ensuring the length is a multiple of 32 bytes\\n        uint256 mask = 256**(32 - len) - 1;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n        return start.length;\\n    }\\n\\n    function _finishBuffer(\\n        bytes memory buffer,\\n        uint256 resultPtr,\\n        uint256 tablePtr,\\n        uint256 numSamplesPlusOne,\\n        uint256 startLength\\n    ) internal pure {\\n        // write ends + size in buffer\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore8(resultPtr, 0x22) // \\\"\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, 0x7D) // }\\n            resultPtr := add(resultPtr, 1)\\n            mstore(buffer, sub(sub(resultPtr, buffer), 32))\\n        }\\n\\n        // compute chnksize (TODO hardcode)\\n        uint256 filesizeMinus8 = ((numSamplesPlusOne - 1) + 44) - 8;\\n        uint256 chunkSize = filesizeMinus8 + 8 - 44;\\n\\n        // filesize // 46 00 00\\n        resultPtr = startLength + 32 - 52;\\n        assembly {\\n            resultPtr := add(buffer, resultPtr)\\n            let v := shl(40, 0x46)\\n            v := add(v, shl(32, and(filesizeMinus8, 255)))\\n            v := add(v, shl(24, and(shr(8, filesizeMinus8), 255)))\\n            v := add(v, shl(16, and(shr(16, filesizeMinus8), 255)))\\n            v := add(v, shl(8, and(shr(24, filesizeMinus8), 255)))\\n            v := add(v, 0x57)\\n            // write 8 characters\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(42, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(36, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(30, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(24, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(18, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(12, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(6, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(v, 0x3F))))\\n        }\\n\\n        // // // chunksize // 61 00 00\\n        resultPtr = startLength + 32 - 4;\\n        assembly {\\n            resultPtr := add(buffer, resultPtr)\\n            let v := shl(40, 0x61)\\n            v := add(v, shl(32, and(chunkSize, 255)))\\n            v := add(v, shl(24, and(shr(8, chunkSize), 255)))\\n            v := add(v, shl(16, and(shr(16, chunkSize), 255)))\\n            v := add(v, shl(8, and(shr(24, chunkSize), 255)))\\n            v := add(v, 0x57)\\n            // write 8 characters\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(42, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(36, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(30, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(24, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(18, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(12, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(shr(6, v), 0x3F))))\\n            resultPtr := add(resultPtr, 1)\\n            mstore8(resultPtr, mload(add(tablePtr, and(v, 0x3F))))\\n        }\\n    }\\n\\n    function _generateWav(\\n        bytes32 d1,\\n        bytes32 d2,\\n        uint8 speed\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(500000);\\n        uint256 startLength = _prepareBuffer(buffer);\\n\\n        string memory table = TABLE_ENCODE;\\n        uint256 tablePtr;\\n        uint256 resultPtr = startLength + 32;\\n        assembly {\\n            // prepare the lookup table\\n            tablePtr := add(table, 1)\\n\\n            // set write pointer\\n            resultPtr := add(buffer, resultPtr)\\n        }\\n\\n        bytes memory freqTable = FREQUENCIES;\\n\\n        uint256 numSamplesPlusOne = (3 * (((32 * (61 * uint256(speed) * SAMPLE_RATE)) / (7350)) + 1)) / 3; //3 * 3 * ((22050 + 3) / 3); // 16 = speed\\n\\n        uint256[] memory noise_handler = new uint256[](4);\\n\\n        // console.log(\\\"numSamplesPlusOne %i\\\", numSamplesPlusOne);\\n        int256 pos = 0;\\n\\n        for (uint256 i = 0; i < numSamplesPlusOne; i += 3) {\\n            assembly {\\n                function abs(a) -> b {\\n                    b := a\\n                    if slt(b, 0) {\\n                        b := sub(0, b)\\n                    }\\n                }\\n\\n                let meloIndex := div(i, div(numSamplesPlusOne, 32)) // TODO numSamples\\n                let data := d1\\n                if gt(meloIndex, 15) {\\n                    data := d2\\n                    meloIndex := sub(meloIndex, 16)\\n                    if gt(meloIndex, 15) {\\n                        meloIndex := 15\\n                    }\\n                }\\n                data := and(shr(mul(sub(15, meloIndex), 16), data), 0xFFFF) // sub(15) is to divide the data in 2\\n                let note := and(data, 0x3F)\\n                let instr := and(shr(6, data), 0x0F)\\n                let vol := mul(and(shr(10, data), 0x07), 100)\\n\\n                let posStep := div(\\n                    mul(and(shr(232, mload(add(freqTable, add(32, mul(note, 3))))), 0xFFFFFF), 10000),\\n                    SAMPLE_RATE\\n                )\\n\\n                let v := 0\\n                for {\\n                    let c := 0\\n                } lt(c, 3) {\\n                    c := add(c, 1)\\n                } {\\n                    let intValue := 0\\n                    // skip first value as it pertain to the double bytes for chunksize\\n                    if gt(pos, 0) {\\n                        // tri\\n                        if eq(instr, 0) {\\n                            // triangle\\n\\n                            intValue := abs(sub(mul(mod(pos, ONE), 2), ONE))\\n                            intValue := sub(mul(intValue, 2), ONE)\\n                            intValue := sdiv(intValue, 2)\\n                        }\\n                        if eq(instr, 1) {\\n                            // tilted saw (uneven_tri)\\n                            let tmp := smod(pos, ONE)\\n                            if slt(tmp, ZERO8750) {\\n                                intValue := sdiv(mul(tmp, 16), 7)\\n                            }\\n                            if sgt(tmp, ZERO8750) {\\n                                intValue := mul(sub(ONE, tmp), 16)\\n                            }\\n                            if eq(tmp, ZERO8750) {\\n                                intValue := mul(sub(ONE, tmp), 16)\\n                            }\\n                            intValue := sdiv(mul(sub(intValue, ONE), HALF), ONE)\\n                        }\\n                        if eq(instr, 2) {\\n                            // saw\\n                            intValue := sdiv(mul(sub(smod(pos, ONE), HALF), ZERO7), ONE)\\n                        }\\n                        if eq(instr, 3) {\\n                            // square\\n                            let tmp := smod(pos, ONE)\\n                            intValue := MINUS_ONE\\n                            if lt(tmp, HALF) {\\n                                intValue := ONE\\n                            }\\n                            intValue := sdiv(intValue, 4)\\n                        }\\n                        if eq(instr, 4) {\\n                            // pulse\\n                            let tmp := smod(pos, ONE)\\n                            intValue := MINUS_ONE\\n                            if lt(tmp, ZERO3125) {\\n                                intValue := ONE\\n                            }\\n                            intValue := sdiv(intValue, 4)\\n                        }\\n                        if eq(instr, 5) {\\n                            // organ (tri2)\\n                            intValue := mul(pos, 4)\\n                            intValue := sdiv(\\n                                mul(\\n                                    sub(\\n                                        sub(\\n                                            add(\\n                                                abs(sub(smod(intValue, TWO), ONE)),\\n                                                sdiv(\\n                                                    sub(abs(sub(smod(sdiv(mul(intValue, HALF), ONE), TWO), ONE)), HALF),\\n                                                    2\\n                                                )\\n                                            ),\\n                                            HALF\\n                                        ),\\n                                        ZERO1\\n                                    ),\\n                                    HALF\\n                                ),\\n                                ONE\\n                            )\\n                        }\\n                        if eq(instr, 6) {\\n                            // phaser (detuned_tri)\\n                            intValue := mul(pos, 2)\\n                            intValue := add(\\n                                sub(abs(sub(smod(intValue, TWO), ONE)), HALF),\\n                                sub(\\n                                    sdiv(sub(abs(sub(smod(sdiv(mul(intValue, 127), 128), TWO), ONE)), HALF), 2),\\n                                    sdiv(ONE, 4)\\n                                )\\n                            )\\n                        }\\n                        if eq(instr, 7) {\\n                            // noise\\n                            let rand := mload(add(noise_handler, 32))\\n                            let lastx := mload(add(noise_handler, 64))\\n                            let sample := mload(add(noise_handler, 96))\\n                            let lsample := mload(add(noise_handler, 128))\\n                            rand := mod(add(mul(1103515245, rand), 12345), 0x80000000)\\n                            let scale := div(mul(sub(pos, lastx), FOUR), 160000)\\n                            lsample := sample\\n                            sample := sdiv(\\n                                mul(add(lsample, scale), sub(div(mul(rand, TWO), 0x80000000), ONE)),\\n                                add(ONE, scale)\\n                            )\\n                            lastx := pos\\n                            intValue := sdiv(\\n                                mul(sdiv(mul(add(lsample, sample), 4), 3), sub(175, mul(scale, 100))),\\n                                HUNDRED\\n                            )\\n                            if slt(intValue, MINUS_ONE) {\\n                                intValue := MINUS_ONE\\n                            }\\n                            if sgt(intValue, ONE) {\\n                                intValue := ONE\\n                            }\\n                            intValue := sdiv(mul(intValue, 5), 10)\\n                            mstore(add(noise_handler, 32), rand)\\n                            mstore(add(noise_handler, 64), lastx)\\n                            mstore(add(noise_handler, 96), sample)\\n                            mstore(add(noise_handler, 128), lsample)\\n                        }\\n                        if eq(instr, 8) {\\n                            intValue := mul(pos, 2)\\n                            intValue := sdiv(\\n                                mul(\\n                                    add(\\n                                        sub(sub(smod(intValue, TWO), ONE), HALF),\\n                                        sub(\\n                                            sdiv(sub(sub(smod(sdiv(mul(intValue, 127), 128), TWO), ONE), HALF), 2),\\n                                            sdiv(ONE, 4)\\n                                        )\\n                                    ),\\n                                    5\\n                                ),\\n                                7\\n                            )\\n                        }\\n                        intValue := sdiv(mul(intValue, vol), 700)\\n                        intValue := add(sdiv(mul(intValue, 256), TWO), 128)\\n                    }\\n                    v := add(v, shl(sub(16, mul(c, 8)), intValue))\\n                    pos := add(pos, posStep)\\n                }\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, v), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, v), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, v), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(v, 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n        }\\n\\n        _finishBuffer(buffer, resultPtr, tablePtr, numSamplesPlusOne, startLength);\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xa4c647d188f568a6dec16793b3da0c3ce7ac6fb940593a6a46e3c608e23d4432\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611053806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633a3dfff614610030575b600080fd5b61004361003e366004610989565b610059565b60405161005091906109c8565b60405180910390f35b606061006684848461006e565b949350505050565b604080516207a1208082526207a14082019092526060916000919060208201818036833701905050905060006100a3826106a6565b90506000604051806060016040528060408152602001610fde6040913990506000806100d0846020610a6a565b90506001830191508085019050600060405180610120016040528060fc8152602001610ee260fc9139905060006003611cb6612af861011360ff8d16603d610a82565b61011d9190610a82565b610128906020610a82565b6101329190610abf565b61013d906001610a6a565b610148906003610a82565b6101529190610abf565b60408051600480825260a0820190925291925060009190602082016080803683370190505090506000805b838110156106875761019d565b806000811215610198576000035b919050565b6020840481048e600f8211156101df57507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0018d600f8211156101df57600f91505b6003603f600f9384036010029290921c91821602870160200151612af860e89190911c612710020491600a82901c6007166064029160061c166000805b600381101561062a5760008715610611578361027357610248620f42406002620f42408b06020361018a565b60029081027ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0010590505b60018414156102f557620f42408807620d59f8811215610297576007601082020591505b620d59f88113156102ae57601081620f4240030291505b620d59f88114156102c557601081620f4240030291505b50620f42407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc09091016207a12002055b600284141561032f5750620f42407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85ee081890701620aae6002055b600384141561037857507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0620f424088076207a12081101561037257620f424091505b50600490055b60048414156103c157507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0620f424088076204c4b48110156103bb57620f424091505b50600490055b600584141561042057600488029050620f42406207a120620186a06207a12060026207a120610403620f4240621e8480620f42406207a1208b0205070361018a565b0305610418620f4240621e848088070361018a565b010303020590505b600684141561048e57506002878102906203d090906207a12061046f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0621e8480608060fe8f0205070161018a565b0305036207a120610489620f4240621e848085070361018a565b030190505b600784141561058b57602089015160408a015160608b015160808c01516380000000613039856341c64e6d020106935062027100623d0900848e03020482915080620f424001620f42406380000000621e848088020403828401020592508c93506305f5e1006064820260af0360036004868601020502059550507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0851215610555577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc094505b620f424085131561056757620f424094505b60208d019390935260408c019190915260608b015260808a0152600a600591909102055b60088414156105f85750600760056002621e8480608060fe8c02058190077fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe91ca001829005918b0207017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe54c100102055b6102bc8582020590506080621e84806101008302050190505b96850196600882026010031b919091019060010161021c565b50603f8160121c168b01518a5360018a019950603f81600c1c168b01518a5360018a019950603f8160061c168b01518a5360018a019950603f81168b01518a535050506001969096019550610680600382610a6a565b905061017d565b50610695898688868c610769565b50969b9a5050505050505050505050565b6000806040516020016106b890610afa565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805190915060208083019085015b6020831061072c578151815261070b602082610a6a565b9050610718602083610a6a565b9150610725602084610d97565b92506106f4565b6000600161073b856020610d97565b61074790610100610ece565b6107519190610d97565b92518251841693191692909217905250505192915050565b60228453600184019350607d84536001840193506020858503038552600060086001846107969190610d97565b6107a190602c610a6a565b6107ab9190610d97565b90506000602c6107bc836008610a6a565b6107c69190610d97565b905060346107d5846020610a6a565b6107df9190610d97565b603f602084901b64ff0000000016601085811b63ff000000169190910162ff00008616019085901c61ff0016016546000000005701602a81901c919091168701519189019750908753600187019650603f8160241c168601518753600187019650603f81601e1c168601518753600187019650603f8160181c168601518753600187019650603f8160121c168601518753600187019650603f81600c1c168601518753600187019650603f8160061c168601518753600187019650603f811686015187535060046108b1846020610a6a565b6108bb9190610d97565b603f602083901b64ff0000000016601084811b63ff000000169190910162ff00008516019084901c61ff0016016561000000005701602a81901c919091168701519189019750908753600187019650603f8160241c168601518753600187019650603f81601e1c168601518753600187019650603f8160181c168601518753600187019650603f8160121c168601518753600187019650603f81600c1c168601518753600187019650603f8160061c168601518753600187019650603f811686015187535050505050505050565b60008060006060848603121561099e57600080fd5b8335925060208401359150604084013560ff811681146109bd57600080fd5b809150509250925092565b600060208083528351808285015260005b818110156109f5578581018301518582016040015282016109d9565b81811115610a07576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610a7d57610a7d610a3b565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610aba57610aba610a3b565b500290565b600082610af5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f646174613a6170706c69636174696f6e2f6a736f6e2c7b226e616d65223a220081527f68656c6c6f000000000000000000000000000000000000000000000000000000601f8201527f222c226465736372697074696f6e223a22415f736f756e645f66756c6c795f6760248201527f656e6572617465645f6f6e636861696e222c2265787465726e616c5f75726c2260448201527f3a2200000000000000000000000000000000000000000000000000000000000060648201527f68747470733a2f2f68656c6c6f0000000000000000000000000000000000000060668201527f222c22696d616765223a22646174613a696d6167652f7376672b786d6c2c3c7360738201527f76672076696577426f783d2730203020333220313627203e3c7465787420783d60938201527f273530252720793d273530252720646f6d696e616e742d626173656c696e653d60b38201527f276d6964646c652720746578742d616e63686f723d276d6964646c652720737460d38201527f796c653d2766696c6c3a20726762283231392c2033392c20313139293b20666f60f38201527f6e742d73697a653a20313270783b273e00000000000000000000000000000000610113820152610ced61012382017f68656c6c6f0000000000000000000000000000000000000000000000000000009052565b7f3c2f746578743e3c2f7376673e222c22616e696d6174696f6e5f75726c223a226101288201527f646174613a617564696f2f7761763b6261736536342c556b6c475267414141416101488201527f425851565a465a6d31304942414141414142414145412b436f414150425641416101688201527f4142414167415a47463059514141000000000000000000000000000000000000610188820152600061019682015b92915050565b600082821015610da957610da9610a3b565b500390565b600181815b80851115610e0757817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610ded57610ded610a3b565b80851615610dfa57918102915b93841c9390800290610db3565b509250929050565b600082610e1e57506001610d91565b81610e2b57506000610d91565b8160018114610e415760028114610e4b57610e67565b6001915050610d91565b60ff841115610e5c57610e5c610a3b565b50506001821b610d91565b5060208310610133831016604e8410600b8410161715610e8a575081810a610d91565b610e948383610dae565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610ec657610ec6610a3b565b029392505050565b6000610eda8383610e0f565b939250505056fe00198d001b12001cae001e6200203100221b00242200264800288f002af8002d8600303b00331900362300395b003cc4004061004435004844004c9000511d0055f0005b0c006076006633006c460072b60079890080c300886b00908700992000a23a00abe000b61800c0ec00cc6500d88d00e56d00f3110101850110d601210f01323f0144750157c0016c310181d90198ca01b11901cada01e62302030b0221ab02421e02647e0288ea02af8002d8620303b10331940362320395b403cc4604061604435704843c04c8fc0511d4055f0005b0c306076306632906c464072b6707988b080c2c0886ad0908770991f90a23a80abe000b61860c0ec54142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220fb1f5d2ebc08624ecf3404b9bb1237b94c800b127167dd3e5c563110c5eb07a664736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80633a3dfff614610030575b600080fd5b61004361003e366004610989565b610059565b60405161005091906109c8565b60405180910390f35b606061006684848461006e565b949350505050565b604080516207a1208082526207a14082019092526060916000919060208201818036833701905050905060006100a3826106a6565b90506000604051806060016040528060408152602001610fde6040913990506000806100d0846020610a6a565b90506001830191508085019050600060405180610120016040528060fc8152602001610ee260fc9139905060006003611cb6612af861011360ff8d16603d610a82565b61011d9190610a82565b610128906020610a82565b6101329190610abf565b61013d906001610a6a565b610148906003610a82565b6101529190610abf565b60408051600480825260a0820190925291925060009190602082016080803683370190505090506000805b838110156106875761019d565b806000811215610198576000035b919050565b6020840481048e600f8211156101df57507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0018d600f8211156101df57600f91505b6003603f600f9384036010029290921c91821602870160200151612af860e89190911c612710020491600a82901c6007166064029160061c166000805b600381101561062a5760008715610611578361027357610248620f42406002620f42408b06020361018a565b60029081027ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0010590505b60018414156102f557620f42408807620d59f8811215610297576007601082020591505b620d59f88113156102ae57601081620f4240030291505b620d59f88114156102c557601081620f4240030291505b50620f42407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc09091016207a12002055b600284141561032f5750620f42407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85ee081890701620aae6002055b600384141561037857507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0620f424088076207a12081101561037257620f424091505b50600490055b60048414156103c157507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0620f424088076204c4b48110156103bb57620f424091505b50600490055b600584141561042057600488029050620f42406207a120620186a06207a12060026207a120610403620f4240621e8480620f42406207a1208b0205070361018a565b0305610418620f4240621e848088070361018a565b010303020590505b600684141561048e57506002878102906203d090906207a12061046f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0621e8480608060fe8f0205070161018a565b0305036207a120610489620f4240621e848085070361018a565b030190505b600784141561058b57602089015160408a015160608b015160808c01516380000000613039856341c64e6d020106935062027100623d0900848e03020482915080620f424001620f42406380000000621e848088020403828401020592508c93506305f5e1006064820260af0360036004868601020502059550507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc0851215610555577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0bdc094505b620f424085131561056757620f424094505b60208d019390935260408c019190915260608b015260808a0152600a600591909102055b60088414156105f85750600760056002621e8480608060fe8c02058190077fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe91ca001829005918b0207017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe54c100102055b6102bc8582020590506080621e84806101008302050190505b96850196600882026010031b919091019060010161021c565b50603f8160121c168b01518a5360018a019950603f81600c1c168b01518a5360018a019950603f8160061c168b01518a5360018a019950603f81168b01518a535050506001969096019550610680600382610a6a565b905061017d565b50610695898688868c610769565b50969b9a5050505050505050505050565b6000806040516020016106b890610afa565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805190915060208083019085015b6020831061072c578151815261070b602082610a6a565b9050610718602083610a6a565b9150610725602084610d97565b92506106f4565b6000600161073b856020610d97565b61074790610100610ece565b6107519190610d97565b92518251841693191692909217905250505192915050565b60228453600184019350607d84536001840193506020858503038552600060086001846107969190610d97565b6107a190602c610a6a565b6107ab9190610d97565b90506000602c6107bc836008610a6a565b6107c69190610d97565b905060346107d5846020610a6a565b6107df9190610d97565b603f602084901b64ff0000000016601085811b63ff000000169190910162ff00008616019085901c61ff0016016546000000005701602a81901c919091168701519189019750908753600187019650603f8160241c168601518753600187019650603f81601e1c168601518753600187019650603f8160181c168601518753600187019650603f8160121c168601518753600187019650603f81600c1c168601518753600187019650603f8160061c168601518753600187019650603f811686015187535060046108b1846020610a6a565b6108bb9190610d97565b603f602083901b64ff0000000016601084811b63ff000000169190910162ff00008516019084901c61ff0016016561000000005701602a81901c919091168701519189019750908753600187019650603f8160241c168601518753600187019650603f81601e1c168601518753600187019650603f8160181c168601518753600187019650603f8160121c168601518753600187019650603f81600c1c168601518753600187019650603f8160061c168601518753600187019650603f811686015187535050505050505050565b60008060006060848603121561099e57600080fd5b8335925060208401359150604084013560ff811681146109bd57600080fd5b809150509250925092565b600060208083528351808285015260005b818110156109f5578581018301518582016040015282016109d9565b81811115610a07576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610a7d57610a7d610a3b565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610aba57610aba610a3b565b500290565b600082610af5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f646174613a6170706c69636174696f6e2f6a736f6e2c7b226e616d65223a220081527f68656c6c6f000000000000000000000000000000000000000000000000000000601f8201527f222c226465736372697074696f6e223a22415f736f756e645f66756c6c795f6760248201527f656e6572617465645f6f6e636861696e222c2265787465726e616c5f75726c2260448201527f3a2200000000000000000000000000000000000000000000000000000000000060648201527f68747470733a2f2f68656c6c6f0000000000000000000000000000000000000060668201527f222c22696d616765223a22646174613a696d6167652f7376672b786d6c2c3c7360738201527f76672076696577426f783d2730203020333220313627203e3c7465787420783d60938201527f273530252720793d273530252720646f6d696e616e742d626173656c696e653d60b38201527f276d6964646c652720746578742d616e63686f723d276d6964646c652720737460d38201527f796c653d2766696c6c3a20726762283231392c2033392c20313139293b20666f60f38201527f6e742d73697a653a20313270783b273e00000000000000000000000000000000610113820152610ced61012382017f68656c6c6f0000000000000000000000000000000000000000000000000000009052565b7f3c2f746578743e3c2f7376673e222c22616e696d6174696f6e5f75726c223a226101288201527f646174613a617564696f2f7761763b6261736536342c556b6c475267414141416101488201527f425851565a465a6d31304942414141414142414145412b436f414150425641416101688201527f4142414167415a47463059514141000000000000000000000000000000000000610188820152600061019682015b92915050565b600082821015610da957610da9610a3b565b500390565b600181815b80851115610e0757817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610ded57610ded610a3b565b80851615610dfa57918102915b93841c9390800290610db3565b509250929050565b600082610e1e57506001610d91565b81610e2b57506000610d91565b8160018114610e415760028114610e4b57610e67565b6001915050610d91565b60ff841115610e5c57610e5c610a3b565b50506001821b610d91565b5060208310610133831016604e8410600b8410161715610e8a575081810a610d91565b610e948383610dae565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610ec657610ec6610a3b565b029392505050565b6000610eda8383610e0f565b939250505056fe00198d001b12001cae001e6200203100221b00242200264800288f002af8002d8600303b00331900362300395b003cc4004061004435004844004c9000511d0055f0005b0c006076006633006c460072b60079890080c300886b00908700992000a23a00abe000b61800c0ec00cc6500d88d00e56d00f3110101850110d601210f01323f0144750157c0016c310181d90198ca01b11901cada01e62302030b0221ab02421e02647e0288ea02af8002d8620303b10331940362320395b403cc4604061604435704843c04c8fc0511d4055f0005b0c306076306632906c464072b6707988b080c2c0886ad0908770991f90a23a80abe000b61860c0ec54142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220fb1f5d2ebc08624ecf3404b9bb1237b94c800b127167dd3e5c563110c5eb07a664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}